<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>个人博客,记录成长历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lurongjiang.github.io/"/>
  <updated>2020-03-16T14:49:30.000Z</updated>
  <id>https://lurongjiang.github.io/</id>
  
  <author>
    <name>LRJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDFS块损坏修复</title>
    <link href="https://lurongjiang.github.io/2020/03/16/Hadoop-HDFS%E5%9D%97%E6%8D%9F%E5%9D%8F%E4%BF%AE%E5%A4%8D/"/>
    <id>https://lurongjiang.github.io/2020/03/16/Hadoop-HDFS%E5%9D%97%E6%8D%9F%E5%9D%8F%E4%BF%AE%E5%A4%8D/</id>
    <published>2020-03-16T07:35:56.000Z</published>
    <updated>2020-03-16T14:49:30.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="HDFS块损坏修复" >          <span class="heading-link">HDFS块损坏修复</span>        </h1>              <h2   id="准备" >          <span class="heading-link">准备</span>        </h2>      <p>创建一个文件夹</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir /blockrecover</span><br></pre></td></tr></table></div></figure><p>准备一个文件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> &gt;&gt; test.txt</span><br></pre></td></tr></table></div></figure><p>上传文件到hdfs</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put test.txt/blockrecover</span><br></pre></td></tr></table></div></figure><p><img src="/images/image/image-20200316133740804.png" alt="image-20200316133740804"></p>        <h2   id="检查健康状态" >          <span class="heading-link">检查健康状态</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs fsck /</span><br></pre></td></tr></table></div></figure><p><img src="/images/image/image-20200316133827968.png" alt="image-20200316133827968"></p>        <h2   id="查看一下block信息" >          <span class="heading-link">查看一下block信息</span>        </h2>      <p><img src="/images/image/image-20200316135332081.png" alt="image-20200316135332081"></p>        <h2   id="在data目录查找block信息" >          <span class="heading-link">在data目录查找block信息</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./data -name <span class="string">"blk_1073741826_1002*"</span></span><br></pre></td></tr></table></div></figure><p><img src="/images/image/image-20200316140233083.png" alt="image-20200316140233083"></p>        <h2   id="删除block和meta信息" >          <span class="heading-link">删除block和meta信息</span>        </h2>      <p>找到之后cd进去吧meta和对应的block删除了,模拟块丢失</p><p><img src="/images/image/image-20200316140320006.png" alt="image-20200316140320006"></p><p>重启hdfs(因为默认fsck间隔时间是6个小时,这里重启)</p>        <h2   id="再来检查" >          <span class="heading-link">再来检查</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs fsck /blockrecover</span><br></pre></td></tr></table></div></figure><p><img src="/images/image/image-20200316141718499.png" alt="image-20200316141718499"></p>        <h2   id="手动修复" >          <span class="heading-link">手动修复</span>        </h2>      <p>hdfs debug</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Usage: hdfs debug &lt;command&gt; [arguments]</span><br><span class="line"></span><br><span class="line">These commands are for advanced users only.</span><br><span class="line"></span><br><span class="line">Incorrect usages may result in data loss. Use at your own risk.</span><br><span class="line"></span><br><span class="line">verifyMeta -meta &lt;metadata-file&gt; [-block &lt;block-file&gt;]</span><br><span class="line">computeMeta -block &lt;block-file&gt; -out &lt;output-metadata-file&gt;</span><br><span class="line">recoverLease -path &lt;path&gt; [-retries &lt;num-retries&gt;]</span><br></pre></td></tr></table></div></figure><hr><p>这个命令是隐藏的,可能是为了防止滥用,只让专业人员知道</p><p>修复命令</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs debug recoverLease -path /blockrecover/test.txt -retries 3</span><br></pre></td></tr></table></div></figure><p>这个可能会成功,可能会失败,所以多试几次</p><p><img src="/images/image/image-20200316143310820.png" alt="image-20200316143310820"></p><p>注意这个必须要指定到文件,目录是不行的</p><p>这样再次检查,就发现是ok了</p><p><img src="/images/image/image-20200316143427089.png" alt="image-20200316143427089"></p><p>block也恢复了</p><p><img src="/images/image/image-20200316143447945.png" alt="image-20200316143447945"></p>]]></content>
    
    <summary type="html">
    
      生产者,HDFS块损坏了怎么办?hdfs fsck帮助你修复.
    
    </summary>
    
    
      <category term="Hadoop" scheme="https://lurongjiang.github.io/categories/Hadoop/"/>
    
      <category term="Block" scheme="https://lurongjiang.github.io/categories/Hadoop/Block/"/>
    
    
      <category term="Hadoop" scheme="https://lurongjiang.github.io/tags/Hadoop/"/>
    
      <category term="BlockRecovery" scheme="https://lurongjiang.github.io/tags/BlockRecovery/"/>
    
  </entry>
  
  <entry>
    <title>如何选择大数据平台落地方案</title>
    <link href="https://lurongjiang.github.io/2020/03/14/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://lurongjiang.github.io/2020/03/14/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E8%90%BD%E5%9C%B0%E6%96%B9%E6%A1%88/</id>
    <published>2020-03-14T03:06:29.000Z</published>
    <updated>2020-03-15T22:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个是跟若泽大数据J哥学习的时候做的笔记,虽然J哥也发了,不过这个是自己的笔记</p>        <h1   id="如何选择大数据平台落地方案" >          <span class="heading-link">如何选择大数据平台落地方案</span>        </h1>              <h2   id="机器" >          <span class="heading-link">机器:</span>        </h2>      <ul><li>云上</li><li>IDC机房</li><li>公司内部机器</li></ul>        <h3   id="云上" >          <span class="heading-link">云上</span>        </h3>      <p>优点:</p><ul><li>节省运维成本</li><li>对运维要求很低</li><li>快速扩容,缩减</li></ul><p>缺点:</p><ul><li>云上机器都是虚拟化,性能-20%</li><li>云上服务器不算公司资产,不方便上市</li></ul><p>总结:</p><ul><li>支付缓慢型</li><li>后期持续支付</li><li></li><li>周期长时,费用最高</li></ul><blockquote><p>高速盘: 主要是做系统盘<br>数据盘: 主要存hdfs数据的</p></blockquote>        <h3   id="IDC机房" >          <span class="heading-link">IDC机房</span>        </h3>      <p>优点:</p><ul><li>不虚拟化,性能高</li><li>算公司资产</li></ul><p>缺点:</p><ul><li>运维能力要求搞</li></ul><p>总结:</p><ul><li>开始支付多</li><li>后期只需要支付IDC机房托管</li></ul>        <h3   id="内部机器" >          <span class="heading-link">内部机器</span>        </h3>      <p>优点:</p><ul><li>没有IDC托管费用</li></ul><p>缺点:</p><ul><li>不可靠,园区断电</li><li>电费</li><li>空调</li><li>人工巡检</li><li>UPS</li></ul><p>总结:</p><ul><li>创业公司</li><li>小团队</li></ul>        <h2   id="如何采购服务器" >          <span class="heading-link">如何采购服务器</span>        </h2>      <ul><li>找三家供应商</li><li>说需求</li><li>推荐报价</li><li>说预算</li></ul><blockquote><p>服务器供应商:</p><ul><li>dell</li><li>浪潮</li><li>华为</li><li>惠普</li><li>IBM</li></ul></blockquote>        <h2   id="对比供应商" >          <span class="heading-link">对比供应商</span>        </h2>      <ul><li>表格</li><li>最终报价单</li><li>优缺点</li><li>实地考察</li><li>综合价格+服务+口碑</li><li>汇报领导</li><li>meet讨论</li><li>采购部门询价</li></ul><blockquote><p>从开始到确定,最好控制再1-2周,因为内存条的价格有浮动</p></blockquote>        <h2   id="确定供应商" >          <span class="heading-link">确定供应商</span>        </h2>      <ul><li>合同word-&gt;法务-&gt;boss审核-&gt;修改</li><li>时间一个月</li><li>供应商打印合同-&gt;盖章-&gt;我们</li><li>第一笔钱30%,3-6个月结清</li><li>等机器时间约1-2周</li></ul>        <h2   id="IDC机房选择" >          <span class="heading-link">IDC机房选择</span>        </h2>      <p>选择三家 报价</p><ul><li>电信机房</li><li>xx</li></ul><p>选择</p><ul><li>2u服务器,散热性好</li><li>2个机架</li><li>一个防火墙</li><li>两个交换机</li></ul><p>坑:<br>问IDC供应商,我有xx台服务器,采购的配置,电源功率发给人家,让他算</p><ul><li>重复之前的流程进行确认付款交付</li></ul>        <h2   id="云专线供应商" >          <span class="heading-link">云专线供应商</span>        </h2>      <ul><li>定期将云的数据同步到IDC,公网不可靠</li><li>云专线光纤直达,20ms</li><li>500M的带宽光纤约7000/月,需要买2根,一次操作费1.6w</li></ul><p>重复之前的流程进行确认付款交付</p>        <h2   id="上架" >          <span class="heading-link">上架</span>        </h2>      <p>都准备好之后,运维约时间上架服务器,搭建防火墙,打通网络,熟练工2天左右<br>都调试完了之后,重启一次机器,网络重启,格式化</p>        <h2   id="网络拓扑图" >          <span class="heading-link">网络拓扑图</span>        </h2>      ]]></content>
    
    <summary type="html">
    
      如何选择大数据平台落地方案?真正的从0到1,到底有哪些坑.
    
    </summary>
    
    
      <category term="others" scheme="https://lurongjiang.github.io/categories/others/"/>
    
    
      <category term="others" scheme="https://lurongjiang.github.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity获取Token源码</title>
    <link href="https://lurongjiang.github.io/2020/02/20/Spring-SpringSecurity%E5%88%9B%E5%BB%BAToken%E7%9A%84%E6%BA%90%E7%A0%81%E8%B7%9F%E8%B8%AA/"/>
    <id>https://lurongjiang.github.io/2020/02/20/Spring-SpringSecurity%E5%88%9B%E5%BB%BAToken%E7%9A%84%E6%BA%90%E7%A0%81%E8%B7%9F%E8%B8%AA/</id>
    <published>2020-02-20T09:05:52.000Z</published>
    <updated>2020-02-24T21:52:17.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SpringSecurity-创建AccessToken" >          <span class="heading-link">SpringSecurity-创建AccessToken</span>        </h1>      <p><img src="/images/imageimage-20200320174700329.png" alt="image-20200320174700329"></p><ul><li>TokenEndPoint 就是判断grant_type到底是什么模式</li><li>ClientDetailService 判断client_id</li><li>ClientDetails封装请求的client的信息</li><li>TokenRequest将ClientDetails封装到请求里,因为Client信息也是token的一部分</li><li>TokenRequest请求TokenGranter(CompositeTokenGranter,默认),TokenGranter封装了四种授权模式,挑一个模式实现来生成token逻辑</li><li>Oauth2Request包含了client信息的ToekenRequests</li><li>Authentication包含了当前认证的用户信息,通过UserDetailsService出来的UserDetails</li><li>Oauth2Authentication包含了当前是哪个第三方client_id请求哪个用户授权,授权模式是什么,授权的参数是什么</li><li>AuthorizationServerTokenServices(默认实现DefaultTokenService)<ul><li>TokenStore 令牌的存取关联</li><li>TokenEnhancer 令牌的增强体,令牌生成后,可以加一些东西</li></ul></li></ul>        <h2   id="创建Token的源码跟踪" >          <span class="heading-link">创建Token的源码跟踪</span>        </h2>              <h3   id="TokenEndPoint" >          <span class="heading-link">TokenEndPoint</span>        </h3>      <p>申请token入口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/oauth/token"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;OAuth2AccessToken&gt; <span class="title">postAccessToken</span><span class="params">(Principal principal, @RequestParam</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, String&gt; parameters)</span> <span class="keyword">throws</span> HttpRequestMethodNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(principal <span class="keyword">instanceof</span> Authentication)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InsufficientAuthenticationException(</span><br><span class="line"><span class="string">"There is no client authentication. Try adding an appropriate authentication filter."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从请求令牌中获取client_id</span></span><br><span class="line">String clientId = getClientId(principal);</span><br><span class="line">    <span class="comment">//调用ClientDetailsService查询第三方应用的详细信息</span></span><br><span class="line">ClientDetails authenticatedClient = getClientDetailsService().loadClientByClientId(clientId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用第三方应用的信息创建TokenRequest</span></span><br><span class="line">TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clientId != <span class="keyword">null</span> &amp;&amp; !clientId.equals(<span class="string">""</span>)) &#123;</span><br><span class="line"><span class="comment">// Only validate the client details if a client authenticated during this</span></span><br><span class="line"><span class="comment">// request.</span></span><br><span class="line"><span class="keyword">if</span> (!clientId.equals(tokenRequest.getClientId())) &#123;</span><br><span class="line"><span class="comment">// double check to make sure that the client ID in the token request is the same as that in the</span></span><br><span class="line"><span class="comment">// authenticated client</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidClientException(<span class="string">"Given client ID does not match authenticated client"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (authenticatedClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">oAuth2RequestValidator.validateScope(tokenRequest, authenticatedClient);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//必须带grant_type</span></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(tokenRequest.getGrantType())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidRequestException(<span class="string">"Missing grant type"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果是简化模式,不会有grant_type,第一次就发放令牌</span></span><br><span class="line"><span class="keyword">if</span> (tokenRequest.getGrantType().equals(<span class="string">"implicit"</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(<span class="string">"Implicit grant type not supported from token endpoint"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是授权码模式请求,先将token请求的scope置空</span></span><br><span class="line">    <span class="comment">//因为此时只是请求授权码,即使你设置了all,但你也不一定有all的权限</span></span><br><span class="line">    <span class="comment">//用户的实际scope是在用户授权之后才能决定</span></span><br><span class="line"><span class="keyword">if</span> (isAuthCodeRequest(parameters)) &#123;</span><br><span class="line"><span class="comment">// The scope was requested or determined during the authorization step</span></span><br><span class="line"><span class="keyword">if</span> (!tokenRequest.getScope().isEmpty()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Clearing scope of incoming token request"</span>);</span><br><span class="line">tokenRequest.setScope(Collections.&lt;String&gt; emptySet());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是刷新令牌,令牌有自己的scope,所以重新设置scope</span></span><br><span class="line"><span class="keyword">if</span> (isRefreshTokenRequest(parameters)) &#123;</span><br><span class="line"><span class="comment">// A refresh token has its own default scopes, so we should ignore any added by the factory here.</span></span><br><span class="line">tokenRequest.setScope(OAuth2Utils.parseParameterList(parameters.get(OAuth2Utils.SCOPE)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成token</span></span><br><span class="line">OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);</span><br><span class="line"><span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedGrantTypeException(<span class="string">"Unsupported grant type: "</span> + tokenRequest.getGrantType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回token</span></span><br><span class="line"><span class="keyword">return</span> getResponse(token);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3   id="TokenRequest" >          <span class="heading-link">TokenRequest</span>        </h3>      <p>封装Client信息成TokenRequest的逻辑</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TokenRequest <span class="title">createTokenRequest</span><span class="params">(Map&lt;String, String&gt; requestParameters, ClientDetails authenticatedClient)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从请求中获取client_id参数</span></span><br><span class="line">String clientId = requestParameters.get(OAuth2Utils.CLIENT_ID);</span><br><span class="line"><span class="keyword">if</span> (clientId == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// if the clientId wasn't passed in in the map, we add pull it from the authenticated client object</span></span><br><span class="line">clientId = authenticatedClient.getClientId();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果两个client_id不匹配,抛异常</span></span><br><span class="line"><span class="comment">// otherwise, make sure that they match</span></span><br><span class="line"><span class="keyword">if</span> (!clientId.equals(authenticatedClient.getClientId())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidClientException(<span class="string">"Given client ID does not match authenticated client"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//获取grant_type</span></span><br><span class="line">String grantType = requestParameters.get(OAuth2Utils.GRANT_TYPE);</span><br><span class="line">    <span class="comment">//获取scope</span></span><br><span class="line">Set&lt;String&gt; scopes = extractScopes(requestParameters, clientId);</span><br><span class="line">TokenRequest tokenRequest = <span class="keyword">new</span> TokenRequest(requestParameters, clientId, scopes, grantType);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tokenRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查寻client的scope</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">extractScopes</span><span class="params">(Map&lt;String, String&gt; requestParameters, String clientId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从参数中获取scope</span></span><br><span class="line">Set&lt;String&gt; scopes = OAuth2Utils.parseParameterList(requestParameters.get(OAuth2Utils.SCOPE));</span><br><span class="line">    <span class="comment">//调用clientDetailsService获取client信息</span></span><br><span class="line">ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果参数没带,直接把数据库的scope设置一下</span></span><br><span class="line"><span class="keyword">if</span> ((scopes == <span class="keyword">null</span> || scopes.isEmpty())) &#123;</span><br><span class="line"><span class="comment">// If no scopes are specified in the incoming data, use the default values registered with the client</span></span><br><span class="line"><span class="comment">// (the spec allows us to choose between this option and rejecting the request completely, so we'll take the</span></span><br><span class="line"><span class="comment">// least obnoxious choice as a default).</span></span><br><span class="line">scopes = clientDetails.getScope();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//检查scope</span></span><br><span class="line"><span class="keyword">if</span> (checkUserScopes) &#123;</span><br><span class="line">scopes = checkUserScopes(scopes, clientDetails);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> scopes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">checkUserScopes</span><span class="params">(Set&lt;String&gt; scopes, ClientDetails clientDetails)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!securityContextAccessor.isUser()) &#123;</span><br><span class="line"><span class="keyword">return</span> scopes;</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;String&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">Set&lt;String&gt; authorities = AuthorityUtils.authorityListToSet(securityContextAccessor.getAuthorities());</span><br><span class="line">    <span class="comment">//如果用户具有这些scope的权限或者角色,添加到scope</span></span><br><span class="line"><span class="keyword">for</span> (String scope : scopes) &#123;</span><br><span class="line"><span class="keyword">if</span> (authorities.contains(scope) || authorities.contains(scope.toUpperCase())</span><br><span class="line">|| authorities.contains(<span class="string">"ROLE_"</span> + scope.toUpperCase())) &#123;</span><br><span class="line">result.add(scope);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3   id="TokenGranter" >          <span class="heading-link">TokenGranter</span>        </h3>      <p>根据4种模式选择token的生成方式</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;TokenGranter&gt; tokenGranters;</span><br><span class="line">....</span><br><span class="line"><span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">grant</span><span class="params">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历TokenGranter集合(4种模式+1个Refresh),找到符合的就可以了</span></span><br><span class="line"><span class="keyword">for</span> (TokenGranter granter : tokenGranters) &#123;</span><br><span class="line">OAuth2AccessToken grant = granter.grant(grantType, tokenRequest);</span><br><span class="line"><span class="keyword">if</span> (grant!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> grant;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">grant</span><span class="params">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.grantType.equals(grantType)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String clientId = tokenRequest.getClientId();</span><br><span class="line">ClientDetails client = clientDetailsService.loadClientByClientId(clientId);</span><br><span class="line"><span class="comment">//校验请求授权码的模式</span></span><br><span class="line">validateGrantType(grantType, client);</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"Getting access token for: "</span> + clientId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> getAccessToken(client, tokenRequest);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateGrantType</span><span class="params">(String grantType, ClientDetails clientDetails)</span> </span>&#123;</span><br><span class="line">Collection&lt;String&gt; authorizedGrantTypes = clientDetails.getAuthorizedGrantTypes();</span><br><span class="line"><span class="comment">//如果请求授权码的模式和client_id配置的请求模式不一样,抛异常</span></span><br><span class="line"><span class="keyword">if</span> (authorizedGrantTypes != <span class="keyword">null</span> &amp;&amp; !authorizedGrantTypes.isEmpty()</span><br><span class="line">&amp;&amp; !authorizedGrantTypes.contains(grantType)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidClientException(<span class="string">"Unauthorized grant type: "</span> + grantType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="/images/imageimage-20200320182932444.png" alt="image-20200320182932444"></p>        <h3   id="封装TokenRequest" >          <span class="heading-link">封装TokenRequest</span>        </h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> OAuth2AccessToken <span class="title">getAccessToken</span><span class="params">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line"><span class="comment">//getOAuth2Authentication根据不同的授权码请求方式,读取相对应的信息</span></span><br><span class="line"><span class="comment">//例如,授权码模式是先把scope返回去,当带scope来请求token的时候,把之前的用户信息读出来</span></span><br><span class="line"><span class="comment">//而密码模式就直接读取用户名密码,生成token</span></span><br><span class="line"><span class="keyword">return</span> tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> OAuth2Authentication <span class="title">getOAuth2Authentication</span><span class="params">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line"><span class="comment">//OAuth2Authentication中封装了TokenRequest</span></span><br><span class="line"><span class="comment">//先创建TokenRequest:主要是去掉敏感的password和client_secret</span></span><br><span class="line"><span class="comment">//添加grant_type参数,以便在后续的OAuth2Request中可以获取到</span></span><br><span class="line">OAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(client, tokenRequest);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建OAuth2Authentication</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OAuth2Authentication(storedOAuth2Request, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> OAuth2Request <span class="title">createOAuth2Request</span><span class="params">(ClientDetails client)</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; requestParameters = getRequestParameters();</span><br><span class="line">HashMap&lt;String, String&gt; modifiable = <span class="keyword">new</span> HashMap&lt;String, String&gt;(requestParameters);</span><br><span class="line"><span class="comment">// Remove password if present to prevent leaks</span></span><br><span class="line">modifiable.remove(<span class="string">"password"</span>);</span><br><span class="line">modifiable.remove(<span class="string">"client_secret"</span>);</span><br><span class="line"><span class="comment">// Add grant type so it can be retrieved from OAuth2Request</span></span><br><span class="line">modifiable.put(<span class="string">"grant_type"</span>, grantType);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), <span class="keyword">true</span>, <span class="keyword">this</span>.getScope(),</span><br><span class="line">client.getResourceIds(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3   id="创建AccessToken" >          <span class="heading-link">创建AccessToken</span>        </h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">createAccessToken</span><span class="params">(OAuth2Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据token的存储方式,取出之前的token</span></span><br><span class="line">OAuth2AccessToken existingAccessToken = tokenStore.getAccessToken(authentication);</span><br><span class="line">OAuth2RefreshToken refreshToken = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (existingAccessToken != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果token过期了,直接移除refreshToken和accessToken</span></span><br><span class="line"><span class="keyword">if</span> (existingAccessToken.isExpired()) &#123;</span><br><span class="line"><span class="keyword">if</span> (existingAccessToken.getRefreshToken() != <span class="keyword">null</span>) &#123;</span><br><span class="line">refreshToken = existingAccessToken.getRefreshToken();</span><br><span class="line"><span class="comment">// The token store could remove the refresh token when the</span></span><br><span class="line"><span class="comment">// access token is removed, but we want to</span></span><br><span class="line"><span class="comment">// be sure...</span></span><br><span class="line">tokenStore.removeRefreshToken(refreshToken);</span><br><span class="line">&#125;</span><br><span class="line">tokenStore.removeAccessToken(existingAccessToken);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没过期,可能你又换了中方式来请求token,直接把之前的token重新存储一下</span></span><br><span class="line"><span class="comment">// Re-store the access token in case the authentication has changed</span></span><br><span class="line">tokenStore.storeAccessToken(existingAccessToken, authentication);</span><br><span class="line"><span class="keyword">return</span> existingAccessToken;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only create a new refresh token if there wasn't an existing one</span></span><br><span class="line"><span class="comment">// associated with an expired access token.</span></span><br><span class="line"><span class="comment">// Clients might be holding existing refresh tokens, so we re-use it in</span></span><br><span class="line"><span class="comment">// the case that the old access token</span></span><br><span class="line"><span class="comment">// expired.</span></span><br><span class="line"><span class="keyword">if</span> (refreshToken == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//刷新token没有,创建一个</span></span><br><span class="line">refreshToken = createRefreshToken(authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// But the refresh token itself might need to be re-issued if it has</span></span><br><span class="line"><span class="comment">// expired.</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (refreshToken <span class="keyword">instanceof</span> ExpiringOAuth2RefreshToken) &#123;</span><br><span class="line"><span class="comment">//如果刷新token过期了,重新颁发一个</span></span><br><span class="line">ExpiringOAuth2RefreshToken expiring = (ExpiringOAuth2RefreshToken) refreshToken;</span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() &gt; expiring.getExpiration().getTime()) &#123;</span><br><span class="line">refreshToken = createRefreshToken(authentication);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建accessToken</span></span><br><span class="line">OAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);</span><br><span class="line"><span class="comment">//存储token</span></span><br><span class="line">tokenStore.storeAccessToken(accessToken, authentication);</span><br><span class="line"><span class="comment">// In case it was modified</span></span><br><span class="line"><span class="comment">//存储刷新token防止修改</span></span><br><span class="line">refreshToken = accessToken.getRefreshToken();</span><br><span class="line"><span class="keyword">if</span> (refreshToken != <span class="keyword">null</span>) &#123;</span><br><span class="line">tokenStore.storeRefreshToken(refreshToken, authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> accessToken;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建accessToken</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> OAuth2AccessToken <span class="title">createAccessToken</span><span class="params">(OAuth2Authentication authentication, OAuth2RefreshToken refreshToken)</span> </span>&#123;</span><br><span class="line"><span class="comment">//accessToken的创建逻辑就是使用UUID,设置过期时间和刷新token</span></span><br><span class="line">DefaultOAuth2AccessToken token = <span class="keyword">new</span> DefaultOAuth2AccessToken(UUID.randomUUID().toString());</span><br><span class="line"><span class="keyword">int</span> validitySeconds = getAccessTokenValiditySeconds(authentication.getOAuth2Request());</span><br><span class="line"><span class="keyword">if</span> (validitySeconds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">token.setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + (validitySeconds * <span class="number">1000L</span>)));</span><br><span class="line">&#125;</span><br><span class="line">token.setRefreshToken(refreshToken);</span><br><span class="line">token.setScope(authentication.getOAuth2Request().getScope());</span><br><span class="line"><span class="comment">//如果配置了token增强,则对token调用增强</span></span><br><span class="line"><span class="keyword">return</span> accessTokenEnhancer != <span class="keyword">null</span> ? accessTokenEnhancer.enhance(token, authentication) : token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建refreshToken</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> OAuth2RefreshToken <span class="title">createRefreshToken</span><span class="params">(OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isSupportRefreshToken(authentication.getOAuth2Request())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//刷新令牌的创建,直接是UUID,设置过期时间偏移一下</span></span><br><span class="line"><span class="keyword">int</span> validitySeconds = getRefreshTokenValiditySeconds(authentication.getOAuth2Request());</span><br><span class="line">String value = UUID.randomUUID().toString();</span><br><span class="line"><span class="keyword">if</span> (validitySeconds &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultExpiringOAuth2RefreshToken(value, <span class="keyword">new</span> Date(System.currentTimeMillis()</span><br><span class="line">+ (validitySeconds * <span class="number">1000L</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultOAuth2RefreshToken(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      SpringSecurity获取Token源码跟踪
    
    </summary>
    
    
      <category term="Spring" scheme="https://lurongjiang.github.io/categories/Spring/"/>
    
      <category term="SpringSecurity" scheme="https://lurongjiang.github.io/categories/Spring/SpringSecurity/"/>
    
    
      <category term="Spring" scheme="https://lurongjiang.github.io/tags/Spring/"/>
    
      <category term="SpringSecurity" scheme="https://lurongjiang.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud概述</title>
    <link href="https://lurongjiang.github.io/2020/02/11/Spring-SpringCloud%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://lurongjiang.github.io/2020/02/11/Spring-SpringCloud%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-02-11T13:37:42.000Z</published>
    <updated>2020-02-13T18:50:19.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SpringCloud" >          <span class="heading-link">SpringCloud</span>        </h1>              <h2   id="SpringCloud概述" >          <span class="heading-link">SpringCloud概述</span>        </h2>              <h3   id="官网" >          <span class="heading-link">官网</span>        </h3>      <ul><li><span class="external-link"><a   href="https://spring.io/projects/spring-cloud"  target="_blank" rel="noopener">官网</a><i class="fa fa-external-link"></i></span></li></ul>        <h3   id="主要功能" >          <span class="heading-link">主要功能</span>        </h3>      <p><img src="/images/image/image-20200207192330288.png" alt="img"></p>        <h3   id="常用子项目" >          <span class="heading-link">常用子项目</span>        </h3>      <p><img src="/images/image/image-20200207192553245.png" alt="img"></p>        <h3   id="版本与兼容" >          <span class="heading-link">版本与兼容</span>        </h3>      <ul><li><p>SpringCloud的版本命名</p><ul><li><p><strong>版本命名</strong></p><p>SpringCloud的版本,前半部分(如Hoxton,Greenwich),意思是发布列车(ReleaseTrain),以伦敦地铁的站名命名,因为SpringCloud有很多的子项目,每个项目都有自己的版本管理,按照发布顺序以A,B,C等为首字母依次命名,已经发布的版本顺序为:</p></li></ul><p><code>Angel -&gt; Brixton -&gt; Camden -&gt; Dalston -&gt; Edgware -&gt; Finchley -&gt; Greenwich -&gt; Hoxton</code><br><img src="/images/image/londontuberail-1.png" alt="img"></p></li></ul><p>  后半部分(如SR,SR1,SR2),意思是服务发布(ServiceRelease),即重大Bug修复</p><ul><li><p><strong>版本发布流程</strong></p><p><code>SNAPSHOT -&gt; Mx -&gt; RELEASE -&gt; SRx</code>,其中x就是一些数字序号,例如M1,M2,SR1,SR2.SNAPSHOT为快照版本(开发版本),Mx为里程碑版本,此时并不是正式版本,但是已经接近正式版,经过多个版本迭代之后,发布第一个RELEASE版本,正式版本;在RELEASE版本之后如果有重大bug修复就会发布SR版本</p></li></ul><div class="table-container"><table><thead><tr><th>Hoxton SR1 <strong>CURRENT</strong> <strong>GA</strong></th><th><span class="external-link"><a   href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/html/spring-cloud.html"  target="_blank" rel="noopener"> Reference Doc.</a><i class="fa fa-external-link"></i></span></th></tr></thead><tbody><tr><td>Hoxton <strong>SNAPSHOT</strong></td><td><span class="external-link"><a   href="https://spring.io/projects/spring-cloud"  target="_blank" rel="noopener"> Reference Doc.</a><i class="fa fa-external-link"></i></span></td></tr><tr><td>Greenwich SR5 <strong>GA</strong></td><td><span class="external-link"><a   href="https://cloud.spring.io/spring-cloud-static/Greenwich.SR5/"  target="_blank" rel="noopener"> Reference Doc.</a><i class="fa fa-external-link"></i></span></td></tr><tr><td>Greenwich <strong>SNAPSHOT</strong></td><td><span class="external-link"><a   href="https://spring.io/projects/spring-cloud"  target="_blank" rel="noopener"> Reference Doc.</a><i class="fa fa-external-link"></i></span></td></tr></tbody></table></div><hr><ul><li><p>SpringCloud的版本生命周期</p><ul><li><p><strong>版本发布规划</strong></p><p><span class="external-link"><a   href="https://github.com/spring-cloud/spring-cloud-release/milestones"  target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-release/milestones</a><i class="fa fa-external-link"></i></span></p></li><li><p><strong>版本发布记录</strong></p><p><span class="external-link"><a   href="https://github.com/spring-cloud/spring-cloud-release/releases"  target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-release/releases</a><i class="fa fa-external-link"></i></span></p></li><li><p><strong>版本终止声明</strong></p><p><span class="external-link"><a   href="https://spring.io/projects/spring-cloud#overview"  target="_blank" rel="noopener">https://spring.io/projects/spring-cloud#overview</a><i class="fa fa-external-link"></i></span></p></li></ul></li><li><p>SpringBoot与SpringCloud的兼容性</p><ul><li>版本兼容性非常重要<br><span class="external-link"><a   href="https://spring.io/projects/spring-cloud#overview"  target="_blank" rel="noopener">https://spring.io/projects/spring-cloud#overview</a><i class="fa fa-external-link"></i></span></li></ul></li></ul><div class="table-container"><table><thead><tr><th>Release Train</th><th>Boot Version</th></tr></thead><tbody><tr><td>Hoxton</td><td>2.2.x</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table></div><ul><li>生产环境如何选择选择<ul><li>坚决不适用非稳定版本</li><li>坚决不适用end-of-life版本</li><li>尽量使用最新版本<ul><li>RELEASE版本可以观望/调研,因为是第一个正式版,并没有在生产上得以广泛应用</li><li>SR2之后可以大规模使用</li></ul></li></ul></li></ul>        <h3   id="版本选择" >          <span class="heading-link">版本选择</span>        </h3>      <ul><li>SpringCloud Hoxton SR1</li><li>SpringBoot 2.2.4.RELEASE</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>检查项目是否能运行</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -U</span><br></pre></td></tr></table></div></figure>        <h2   id="SpringCloud服务注册与发现" >          <span class="heading-link">SpringCloud服务注册与发现</span>        </h2>      <ul><li>使得服务消费者总能找到服务提供者</li></ul>        <h3   id="Consul单机版安装" >          <span class="heading-link">Consul单机版安装</span>        </h3>              <h4   id="Consul下载" >          <span class="heading-link">Consul下载</span>        </h4>      <ul><li>下载Consoule <span class="external-link"><a   href="https://releases.hashicorp.com/consul/1.6.3/consul_1.6.3_linux_amd64.zip"  target="_blank" rel="noopener">https://releases.hashicorp.com/consul/1.6.3/consul_1.6.3_linux_amd64.zip</a><i class="fa fa-external-link"></i></span></li></ul>        <h4   id="需要的端口" >          <span class="heading-link">需要的端口</span>        </h4>      <div class="table-container"><table><thead><tr><th align="left">Use</th><th align="left">Default Ports</th></tr></thead><tbody><tr><td align="left">DNS: The DNS server (TCP and UDP)</td><td align="left">8600</td></tr><tr><td align="left">HTTP: The HTTP API (TCP Only)</td><td align="left">8500</td></tr><tr><td align="left">HTTPS: The HTTPs API</td><td align="left">disabled (8501)*</td></tr><tr><td align="left">gRPC: The gRPC API</td><td align="left">disabled (8502)*</td></tr><tr><td align="left">LAN Serf: The Serf LAN port (TCP and UDP)</td><td align="left">8301</td></tr><tr><td align="left">Wan Serf: The Serf WAN port TCP and UDP)</td><td align="left">8302</td></tr><tr><td align="left">server: Server RPC address (TCP Only)</td><td align="left">8300</td></tr><tr><td align="left">Sidecar Proxy Min: Inclusive min port number to use for automatically assigned sidecar service registrations.</td><td align="left">21000</td></tr><tr><td align="left">Sidecar Proxy Max: Inclusive max port number to use for automatically assigned sidecar service registrations.</td><td align="left">21255</td></tr></tbody></table></div><p>检查端口是否被占用的方法</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Windows:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有结果说明没有被占用</span></span><br><span class="line">netstat -ano| findstr "8500"</span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有结果说明没有被占用</span></span><br><span class="line">netstat -antp |grep 8500</span><br><span class="line"></span><br><span class="line">macOS:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有结果说明没有被占用</span></span><br><span class="line">netstat -ant | grep 8500</span><br><span class="line">或</span><br><span class="line">lsof -i:8500</span><br></pre></td></tr></table></div></figure>        <h4   id="安装和启动" >          <span class="heading-link">安装和启动</span>        </h4>      <ul><li>解压</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul agent -dev -client 0.0.0.0</span><br></pre></td></tr></table></div></figure><ul><li>严重是否成功</li></ul><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul -v</span><br></pre></td></tr></table></div></figure><ul><li>访问Consul首页<code>localhost:8500</code></li></ul><p><strong>启动参数</strong></p><ul><li>-ui 开启ui</li><li>-client 让consul拥有client功能,接受服务注册;0.0.0.0允许任意ip注册,不写只能使用localhost连接</li><li>-dev 以开发模式运行consul</li></ul>        <h3   id="整合Consul" >          <span class="heading-link">整合Consul</span>        </h3>      <ul><li><p>添加依赖</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ul><ul><li><p>配置</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 指定注册到consul的服务名称,分隔符不能是下划线</span></span><br><span class="line">    <span class="comment"># 如果服务发现组件是Consul,会强制转换成中划线,导致找不到服务</span></span><br><span class="line">    <span class="comment"># 如果服务发现组件是Ribbon,则因为Ribbon的问题(把默认名称当初虚拟主机名,而虚拟主机名不能用下划线),会造成微服务之间无法调用</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">micro-service-user</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.238</span><span class="number">.128</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br></pre></td></tr></table></div></figure></li><li><p>启动,检查consul ui的服务上线情况</p></li></ul>        <h3   id="Consul健康检查" >          <span class="heading-link">Consul健康检查</span>        </h3>      <p><img src="/images/image/image-20200207231837317.png" alt="img"></p><ul><li>添加健康检查依赖</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li><p>配置</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></div></figure></li></ul><ul><li><p>端点</p><p><span class="external-link"><a   href="http://localhost:8080/actuator"  target="_blank" rel="noopener">http://localhost:8080/actuator</a><i class="fa fa-external-link"></i></span> 查看端点</p><p><span class="external-link"><a   href="http://localhost:8080/actuator/health"  target="_blank" rel="noopener">http://localhost:8080/actuator/health</a><i class="fa fa-external-link"></i></span> 健康检查</p><p>添加详情配置,可以检查详细的健康情况</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="attr">health:</span></span><br><span class="line">        <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></div></figure><p><img src="/images/image/image-20200207233909996.png" alt="img"></p></li></ul><ul><li><p>简单研究一下健康检查的源码</p><p>以磁盘检查的为例</p><p>健康检查的类都继承了<code>AbstractHealthIndicator</code>抽象类,而<code>AbstractHealthIndicator</code>实现了<code>HealthIndicator</code>接口,所有健康检查实现类都必须实现<code>doHealthCheck(Health.Builder builder)</code>方法</p></li></ul><p><img src="/images/image/image-20200207235333557.png" alt="img"></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskSpaceHealthIndicator</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(DiskSpaceHealthIndicator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> File path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DataSize threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@code</span> DiskSpaceHealthIndicator&#125; instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path the Path used to compute the available disk space</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threshold the minimum disk space that should be available</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DiskSpaceHealthIndicator</span><span class="params">(File path, DataSize threshold)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="string">"DiskSpace health check failed"</span>);</span><br><span class="line"><span class="keyword">this</span>.path = path;</span><br><span class="line"><span class="keyword">this</span>.threshold = threshold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取可用的空间字节数</span></span><br><span class="line"><span class="keyword">long</span> diskFreeInBytes = <span class="keyword">this</span>.path.getUsableSpace();</span><br><span class="line">        <span class="comment">//如果可用的字节数大于预留字节数阈值则认为是健康的,设置status为UP</span></span><br><span class="line"><span class="keyword">if</span> (diskFreeInBytes &gt;= <span class="keyword">this</span>.threshold.toBytes()) &#123;</span><br><span class="line">builder.up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则任务是不健康的,设置status为DOWN</span></span><br><span class="line">logger.warn(LogMessage.format(<span class="string">"Free disk space below threshold. Available: %d bytes (threshold: %s)"</span>,</span><br><span class="line">diskFreeInBytes, <span class="keyword">this</span>.threshold));</span><br><span class="line">builder.down();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//输出总空间,可用空间和预留阈值</span></span><br><span class="line">builder.withDetail(<span class="string">"total"</span>, <span class="keyword">this</span>.path.getTotalSpace()).withDetail(<span class="string">"free"</span>, diskFreeInBytes)</span><br><span class="line">.withDetail(<span class="string">"threshold"</span>, <span class="keyword">this</span>.threshold.toBytes());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个获取可用字节数还是挺好的,直接利用了File提供的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUsableSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sm.checkPermission(<span class="keyword">new</span> RuntimePermission(<span class="string">"getFileSystemAttributes"</span>));</span><br><span class="line">        sm.checkRead(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fs是默认的文件系统FileSystem fs = DefaultFileSystem.getFileSystem();</span></span><br><span class="line">    <span class="keyword">return</span> fs.getSpace(<span class="keyword">this</span>, FileSystem.SPACE_USABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>健康检查使用了建造者模式,对于不同的健康指标非常方便,值得学习<br><img src="/images/image/image-20200208000623044.png" alt="img"></p><ul><li><p>整合Consul和SpringCloud的actuator</p><p>修改配置</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">consul:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.238</span><span class="number">.128</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">        <span class="attr">discovery:</span></span><br><span class="line">          <span class="attr">health-check-path:</span> <span class="string">/actuator/health</span></span><br></pre></td></tr></table></div></figure></li></ul><p>这样启动之后,再检查consul ui就可以发现没有红色的叉了<br><img src="/images/image/image-20200208001532048.png" alt="img"></p><p>其他的健康检查配置<br><img src="/images/image/image-20200208001745953.png" alt="img"></p>        <h3   id="注册课程微服务到Consul" >          <span class="heading-link">注册课程微服务到Consul</span>        </h3>      <ul><li>添加依赖</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>配置</li></ul><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.238.128:3306/ms?serverTimezone=GMT%2B8&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">lrj</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">lu11221015</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># JPA配置</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">micro-service-class</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.238</span><span class="number">.128</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">health-check-path:</span> <span class="string">/actuator/health</span></span><br><span class="line"><span class="comment"># 暴露所有的actuator端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line">  <span class="comment"># 开启健康检查详细信息</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></div></figure><ul><li>重构用户微服务</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"discoveryTest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discoveryTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discoveryClient.getInstances(<span class="string">"micro-service-class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>访问端点,可以发现不需要指定课程微服务的主机和端口就可以拿到相关信息,实现了服务发现<br><img src="/images/image/image-20200208003543107.png" alt="img"></li></ul>        <h3   id="重构课程微服务" >          <span class="heading-link">重构课程微服务</span>        </h3>      <ul><li><p>原来</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LessonServiceImpl</span> <span class="keyword">implements</span> <span class="title">LessonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LessonRepository lessonRepository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LessonUserRepository lessonUserRepository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lesson <span class="title">buyById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据课程id查询课程</span></span><br><span class="line">        Lesson lesson = lessonRepository.findById(id).orElseThrow(() -&gt; <span class="keyword">new</span> IllegalArgumentException(<span class="string">"该课程不存在"</span>));</span><br><span class="line">        <span class="comment">//根据课程查询是否已经购买过</span></span><br><span class="line">        LessonUser lessonUser = lessonUserRepository.findByLessonId(id);</span><br><span class="line">        <span class="keyword">if</span> (lessonUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lesson;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//todo 2.登录之后获取userId</span></span><br><span class="line">        String userId = <span class="string">"1"</span>;</span><br><span class="line">        <span class="comment">// 3. 如果没有购买过,查询用户余额</span></span><br><span class="line">        UserDTO userDTO = restTemplate.getForObject(<span class="string">"http://localhost:8080/user/&#123;userId&#125;"</span>, UserDTO<span class="class">.<span class="keyword">class</span>, <span class="title">userId</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (userDTO != <span class="keyword">null</span> &amp;&amp; userDTO.getMoney() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                userDTO.getMoney().subtract(lesson.getPrice()).doubleValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"余额不足"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 购买逻辑</span></span><br><span class="line">        <span class="comment">//todo 4.1.调用微服务金额扣减接口 4.2.向lesson_user表插入记录</span></span><br><span class="line">        <span class="keyword">return</span> lesson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这个写死了主机地址,无法动态获取微服务路径</p></li><li><p>重构</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LessonServiceImpl</span> <span class="keyword">implements</span> <span class="title">LessonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LessonRepository lessonRepository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LessonUserRepository lessonUserRepository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lesson <span class="title">buyById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据课程id查询课程</span></span><br><span class="line">        Lesson lesson = lessonRepository.findById(id).orElseThrow(() -&gt; <span class="keyword">new</span> IllegalArgumentException(<span class="string">"该课程不存在"</span>));</span><br><span class="line">        <span class="comment">//根据课程查询是否已经购买过</span></span><br><span class="line">        LessonUser lessonUser = lessonUserRepository.findByLessonId(id);</span><br><span class="line">        <span class="keyword">if</span> (lessonUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lesson;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//todo 2.登录之后获取userId</span></span><br><span class="line">        String userId = <span class="string">"1"</span>;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"micro-service-user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (instances != <span class="keyword">null</span> &amp;&amp; !instances.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//todo 需要改进,如果存在多个实例,需要考虑负载均衡</span></span><br><span class="line">            ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">            URI uri = instance.getUri();</span><br><span class="line">            UserDTO userDTO = restTemplate.getForObject(uri + <span class="string">"/user/&#123;userId&#125;"</span>, UserDTO<span class="class">.<span class="keyword">class</span>, <span class="title">userId</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (userDTO != <span class="keyword">null</span> &amp;&amp; userDTO.getMoney() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    userDTO.getMoney().subtract(lesson.getPrice()).doubleValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"余额不足"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4. 购买逻辑</span></span><br><span class="line">            <span class="comment">//todo 4.1.调用微服务金额扣减接口 4.2.向lesson_user表插入记录</span></span><br><span class="line">            <span class="keyword">return</span> lesson;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"用户微服务异常,无法购买课程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>可以动态的获取到用户微服务的地址,请求正常<br><img src="/images/image/image-20200208004838563.png" alt="img"></p></li></ul>        <h3   id="元数据" >          <span class="heading-link">元数据</span>        </h3>      <p>Consul是没有元数据的概念的,所以SpringCloud做了个适配,在consul下设置tags作为元数据.</p><p>元数据可以对微服务添加描述,标识,例如机房在哪里,这样可以进行就近判断,或者当就近机房不可用时才检查远程机房,当两者都不可用时才认为服务不可用等实现容灾或者跨机房</p><ul><li><p>配置</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.238</span><span class="number">.128</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">health-check-path:</span> <span class="string">/actuator/health</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="string">JiFang=Beijing,JiFang=Shanghai</span></span><br></pre></td></tr></table></div></figure></li><li><p>实现机房选择</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"discoveryTest"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discoveryTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"micro-service-class"</span>);</span><br><span class="line">    <span class="keyword">if</span> (instances != <span class="keyword">null</span>) &#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; shanghaiInstances = instances.stream()</span><br><span class="line">                .filter(s -&gt; s.getMetadata().containsKey(<span class="string">"Shanghai"</span>)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">if</span> (!shanghaiInstances.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> shanghaiInstances;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    <summary type="html">
    
      SpringCloud相关介绍
    
    </summary>
    
    
      <category term="Spring" scheme="https://lurongjiang.github.io/categories/Spring/"/>
    
      <category term="SpringCloud" scheme="https://lurongjiang.github.io/categories/Spring/SpringCloud/"/>
    
    
      <category term="Spring" scheme="https://lurongjiang.github.io/tags/Spring/"/>
    
      <category term="SpringCloud" scheme="https://lurongjiang.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring解析xml成BeanDefinition的过程</title>
    <link href="https://lurongjiang.github.io/2020/01/26/Spring-Bean%E7%9A%84%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>https://lurongjiang.github.io/2020/01/26/Spring-Bean%E7%9A%84%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B/</id>
    <published>2020-01-26T15:07:34.000Z</published>
    <updated>2020-02-13T10:17:23.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="Spring-Bean的解析过程" >          <span class="heading-link">Spring Bean的解析过程</span>        </h1>              <h2   id="xml文件的读取" >          <span class="heading-link">xml文件的读取</span>        </h2>      <p>从我们的入口开始</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">    Student student = context.getBean(Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(student.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>先进入ClassPathXmlApplicationContext的构造器</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>继续调用另一个构造器</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(parent);</span><br><span class="line">   <span class="comment">//创建解析器，解析configLocations</span></span><br><span class="line">   setConfigLocations(configLocations);</span><br><span class="line">   <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      refresh();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这个refresh()方法是核心方法,点进去</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">//为容器初始化做准备，重要程度：0</span></span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         重要程度：5</span></span><br><span class="line"><span class="comment">        1、创建BeanFactory对象</span></span><br><span class="line"><span class="comment">      * 2、xml解析</span></span><br><span class="line"><span class="comment">      *  传统标签解析：bean、import等</span></span><br><span class="line"><span class="comment">      *  自定义标签解析 如：&lt;context:component-scan base-package="com.xiangxue.jack"/&gt;</span></span><br><span class="line"><span class="comment">      *  自定义标签解析流程：</span></span><br><span class="line"><span class="comment">      *     a、根据当前解析标签的头信息找到对应的namespaceUri</span></span><br><span class="line"><span class="comment">      *     b、加载spring所以jar中的spring.handlers文件。并建立映射关系</span></span><br><span class="line"><span class="comment">      *     c、根据namespaceUri从映射关系中找到对应的实现了NamespaceHandler接口的类</span></span><br><span class="line"><span class="comment">      *     d、调用类的init方法，init方法是注册了各种自定义标签的解析类</span></span><br><span class="line"><span class="comment">      *     e、根据namespaceUri找到对应的解析类，然后调用paser方法完成标签解析</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * 3、把解析出来的xml标签封装成BeanDefinition对象</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">       ....</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>继续看obtainFreshBeanFactory()方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 核心方法，必须读，重要程度：5</span></span><br><span class="line"><span class="comment">    * 这里使用了模板设计模式,Spring使用最多的设计模式,父类定义了模板,子类具体实现</span></span><br><span class="line"><span class="comment">    * 其实反过来看,AbstractApplicationContext的refresh()同样也是定义了模板,onFresh()方法交给子类去实现</span></span><br><span class="line"><span class="comment">    * 例如SpringBoot中嵌入式Tomcat启动就是覆写了onFresh()方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> AbstractApplicationContext#onRefresh()</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   refreshBeanFactory();</span><br><span class="line">   <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 因为ClassPathXmlApplicationContext是AbstractRefreshableApplicationContext的子类</span></span><br><span class="line"><span class="comment"> * 所以跳转到AbstractRefreshableApplicationContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AbstractRefreshableApplicationContext#refreshBeanFactory()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException        if initialization of the bean factory failed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if already initialized and multiple refresh</span></span><br><span class="line"><span class="comment"> *                               attempts are not supported</span></span><br><span class="line"><span class="comment"> *                               &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br></pre></td></tr></table></div></figure><p>跳转到AbstractRefreshableApplicationContext的refreshBeanFactory()</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果BeanFactory不为空，则清除BeanFactory和里面的实例</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建DefaultListableBeanFactory</span></span><br><span class="line">      <span class="comment">//BeanFactory实例工厂,不管什么实例都可以从BeanFactory获取到</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置是否可以循环依赖 allowCircularReferences</span></span><br><span class="line">      <span class="comment">//是否允许使用相同名称重新注册不同的bean实现.</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解析xml，并把xml中的标签封装成BeanDefinition对象</span></span><br><span class="line"><span class="comment">       * 因为ClassPathXmlApplication是继承自 AbstractXmlApplicationContext</span></span><br><span class="line"><span class="comment">       * 所以进入AbstractXmlApplicationContext,又是一个模板</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@see</span> AbstractXmlApplicationContext#loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException, IOException</span>;</span><br></pre></td></tr></table></div></figure><p>继续看AbstractXmlApplicationContext的loadBeanDefinitions(…)</p><p>xml的解析交给了XmlBeanDefinitionReader来解析</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">   <span class="comment">//创建xml的解析器，这里是一个委托模式</span></span><br><span class="line">   <span class="comment">//xml的解析工作,委托给XmlBeanDefinitionReader来解析</span></span><br><span class="line">   XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//主要看这个方法  重要程度 5</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>继续看loadBeanDefinitions(…)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取需要加载的xml配置文件</span></span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//委托给reader来解析xml</span></span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>点进去</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(location, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">    <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"Cannot load bean definitions from location ["</span> + location + <span class="string">"]: no ResourceLoader available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">        <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//把字符串类型的xml文件路径，形如：classpath*:user/**/*-context.xml,转换成Resource对象类型，其实就是用流</span></span><br><span class="line">            <span class="comment">//的方式加载配置文件，然后封装成Resource对象，不重要，可以不看</span></span><br><span class="line">            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主要看这个方法 ** 重要程度 5</span></span><br><span class="line">            <span class="keyword">int</span> count = loadBeanDefinitions(resources);</span><br><span class="line">           ....</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                <span class="string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="string">"]"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">        Resource resource = resourceLoader.getResource(location);</span><br><span class="line">        <span class="keyword">int</span> count = loadBeanDefinitions(resource);</span><br><span class="line">....</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>把xml读出来之后封装成了Resource对象,开始解析Resource</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">//模板设计模式，调用到子类中的方法</span></span><br><span class="line">      <span class="comment">//又是一个模板,因为委托给了XmlBeanDefinitionReader</span></span><br><span class="line">      <span class="comment">/**<span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader#loadBeanDefinitions(org.springframework.core.io.Resource)*/</span></span><br><span class="line">      count += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>xml读出来之后,又把Resource封装成带编码的对象,委托给XmlBeanDefinitionReader进行解析</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//EncodedResource带编码的对Resource对象的封装</span></span><br><span class="line">   <span class="comment">//把资源流对象又做了编码的封装</span></span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> EncodedResource(resource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>再看如何解析Resource的</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">   Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">   <span class="keyword">if</span> (currentResources == <span class="keyword">null</span>) &#123;</span><br><span class="line">      currentResources = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">      <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"Detected cyclic loading of "</span> + encodedResource + <span class="string">" - check your import definitions!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//获取Resource对象中的xml文件流对象</span></span><br><span class="line">      InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//InputSource是jdk中的sax xml文件解析对象</span></span><br><span class="line">         InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">         <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//主要看这个方法 **  重要程度 5</span></span><br><span class="line">         <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         inputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">    ...</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>把InputStream流对象从Resouce中读出来,封装成InputSource对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//把inputSource 封装成Document文件对象，这是jdk的API</span></span><br><span class="line">      Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//主要看这个方法，根据解析出来的document对象，拿到里面的标签元素封装成BeanDefinition</span></span><br><span class="line">      <span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from "</span> + resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"> ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>把流对象InputSource使用SAX进行解析成Document对象,对Document对象进行解析</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="comment">//xml解析成Document之后,又将Document委托给BeanDefinitionDocumentReader来解析Document成BeanDefinition</span></span><br><span class="line">    <span class="comment">//又来一记委托模式，BeanDefinitionDocumentReader委托这个类进行document的解析</span></span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    <span class="comment">//主要看这个方法，createReaderContext(resource) XmlReaderContext上下文，封装了XmlBeanDefinitionReader对象</span></span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Document委托给BeanDefinitionDocumentReader来解析Document成BeanDefinition</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">    <span class="comment">//主要看这个方法，把root节点传进去</span></span><br><span class="line">    doRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">    BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">    <span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">...</span><br><span class="line">    <span class="comment">//又是模板,冗余设计,空实现</span></span><br><span class="line">    preProcessXml(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主要看这个方法，标签具体解析过程</span></span><br><span class="line">    parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">    postProcessXml(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>把Document的根传进去,开始解析Document</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      <span class="comment">//获取根节点下的所有子节点</span></span><br><span class="line">      <span class="comment">//遍历所有子节点,依次解析</span></span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">//默认标签解析,import,alias,bean,beans</span></span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//自定义标签解析,委托给BeanDefinitionParserDelegate来解析</span></span><br><span class="line">               <span class="comment">//context:component-scan等,使用了namespaceUri</span></span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>标签的解析分为默认标签(包括import,alias,bean,beans)和自定义标签(如context:componet-scan,mvc:annotation-drive等,这类带前缀的标签需要namespaceUri来指定实现,使用了SPI思想)</p>        <h2   id="默认标签的解析" >          <span class="heading-link">默认标签的解析</span>        </h2>      <p>先看默认标签的解析</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//import标签解析  重要程度 1 ，可看可不看</span></span><br><span class="line">   <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//alias标签解析 别名标签  重要程度 1 ，可看可不看</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//bean标签，重要程度  5，必须看</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      processBeanDefinition(ele, delegate);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// recurse</span></span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>核心方法processBeanDefinition(…)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//重点看这个方法，重要程度 5 ，解析document，封装成BeanDefinition</span></span><br><span class="line">   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">   <span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//该方法功能不重要，设计模式重点看一下，装饰者设计模式，加上SPI设计思想</span></span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//完成document到BeanDefinition对象转换后，对BeanDefinition对象进行缓存注册</span></span><br><span class="line">         <span class="comment">// Register the final decorated instance.</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Send registration event.</span></span><br><span class="line">      getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>继续看BeanDefinitionParserDelegate是如何解析的parseBeanDefinitionElement(ele)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> parseBeanDefinitionElement(ele, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">   String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">      aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   String beanName = id;</span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//检查beanName是否重复</span></span><br><span class="line">   <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">      checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继续点进去看</span></span><br><span class="line">   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">   <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">               beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">               <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">               <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">               <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">               String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">               <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                  aliases.add(beanClassName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">               logger.trace(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>继续点</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line"></span><br><span class="line">   String className = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">      className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">   &#125;</span><br><span class="line">   String parent = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">      parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建GenericBeanDefinition对象,设置parent和className</span></span><br><span class="line">      AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析bean标签的属性，并把解析出来的属性设置到BeanDefinition对象中</span></span><br><span class="line">      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析bean中的meta标签</span></span><br><span class="line">      parseMetaElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析bean中的lookup-method标签  重要程度：2，可看可不看</span></span><br><span class="line">      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析bean中的replaced-method标签  重要程度：2，可看可不看</span></span><br><span class="line">      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析bean中的constructor-arg标签  重要程度：2，可看可不看</span></span><br><span class="line">      parseConstructorArgElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析bean中的property标签  重要程度：2，可看可不看</span></span><br><span class="line">      parsePropertyElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//可以不看，用不到</span></span><br><span class="line">      parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">      bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bd;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">   ...</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>先创建BeanDefinition的封装GenericBeanDefinition</p>        <h3   id="属性解析" >          <span class="heading-link">属性解析</span>        </h3>      <p>解析每个节点的属性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionAttributes</span><span class="params">(Element ele, String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                            @Nullable BeanDefinition containingBean, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果有singleton属性,先提示一下,建议使用scope属性</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class="line">        error(<span class="string">"Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration"</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class="line">        <span class="comment">//如果有scope属性,设置scope</span></span><br><span class="line">        bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Take default from containing bean in case of an inner bean definition.</span></span><br><span class="line">        bd.setScope(containingBean.getScope());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置abstract属性,不实例化,子类需要parent标签引用,父类提供了公共的属性,子类不需要写那么多了</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置lazy-init属性</span></span><br><span class="line">    String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class="line">        lazyInit = <span class="keyword">this</span>.defaults.getLazyInit();</span><br><span class="line">    &#125;</span><br><span class="line">    bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置autowired属性</span></span><br><span class="line">    String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class="line">    bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置depends-on属性</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class="line">        String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class="line">        bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置autowired-candidate</span></span><br><span class="line">    String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">""</span>.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class="line">        String candidatePattern = <span class="keyword">this</span>.defaults.getAutowireCandidates();</span><br><span class="line">        <span class="keyword">if</span> (candidatePattern != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class="line">            bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置primary</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置init-method</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class="line">        bd.setInitMethodName(initMethodName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.defaults.getInitMethod() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        bd.setInitMethodName(<span class="keyword">this</span>.defaults.getInitMethod());</span><br><span class="line">        bd.setEnforceInitMethod(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置destroy-method</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class="line">        bd.setDestroyMethodName(destroyMethodName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.defaults.getDestroyMethod() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        bd.setDestroyMethodName(<span class="keyword">this</span>.defaults.getDestroyMethod());</span><br><span class="line">        bd.setEnforceDestroyMethod(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置factory-method,指定生成实例的工厂方法</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置factory-bean属性,指定生成实例的工厂,这个需要配合factory-method使用</span></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>parseBeanDefinitionAttributes(..)方法主要是解析Node的属性并设置了BeanDefinition的一些属性</p>        <h3   id="meta标签解析" >          <span class="heading-link">meta标签解析</span>        </h3>      <p>再看meta标签的解析,其实就是把bean标签的meta属性的key,value读取出来,设置到BeanDefinition,没啥用,一个标识而已</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseMetaElements</span><span class="params">(Element ele, BeanMetadataAttributeAccessor attributeAccessor)</span> </span>&#123;</span><br><span class="line">   NodeList nl = ele.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">         Element metaElement = (Element) node;</span><br><span class="line">         String key = metaElement.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">         String value = metaElement.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">         BeanMetadataAttribute attribute = <span class="keyword">new</span> BeanMetadataAttribute(key, value);</span><br><span class="line">         attribute.setSource(extractSource(metaElement));</span><br><span class="line">         attributeAccessor.addMetadataAttribute(attribute);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3   id="lookup-method标签解析" >          <span class="heading-link">lookup-method标签解析</span>        </h3>      <p>同样的lookup-method标签的解析也是类似的</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseLookupOverrideSubElements</span><span class="params">(Element beanEle, MethodOverrides overrides)</span> </span>&#123;</span><br><span class="line">    NodeList nl = beanEle.getChildNodes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">        Node node = nl.item(i);</span><br><span class="line">        <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="comment">//获取name属性</span></span><br><span class="line">            String methodName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">            <span class="comment">//获取bean属性</span></span><br><span class="line">            String beanRef = ele.getAttribute(BEAN_ELEMENT);</span><br><span class="line">            <span class="comment">//封装成 LookupOverride</span></span><br><span class="line">            LookupOverride override = <span class="keyword">new</span> LookupOverride(methodName, beanRef);</span><br><span class="line">            override.setSource(extractSource(ele));</span><br><span class="line">            <span class="comment">//可能有多个lookup-method标签,所以用list装起来</span></span><br><span class="line">            overrides.addOverride(override);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr><p>不过值得一提的是,这个lookup-method的设计精髓主要是代理思想,很方便的实现了多态</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lrj.test.bean.Student"</span> <span class="attr">id</span>=<span class="string">"student"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lrj.test.bean.Women"</span> <span class="attr">id</span>=<span class="string">"women"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实现多态,传入什么就是什么--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lrj.test.bean.AbstractClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"getPeople"</span> <span class="attr">bean</span>=<span class="string">"women"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Women</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am women"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getPeople().show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> People <span class="title">getPeople</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个方法最终打印的是I am women</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">    AbstractClass abstractClass=context.getBean(AbstractClass<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    abstractClass.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr>        <h3   id="replace-method标签解析" >          <span class="heading-link">replace-method标签解析</span>        </h3>      <p>再看看parseReplacedMethodSubElements(…)解析replace-method属性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseReplacedMethodSubElements</span><span class="params">(Element beanEle, MethodOverrides overrides)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) &#123;</span><br><span class="line">         Element replacedMethodEle = (Element) node;</span><br><span class="line">         String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">         String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//一个replaced-method标签封装成一个ReplaceOverride对象，最后加入到BeanDefinition对象中</span></span><br><span class="line">         ReplaceOverride replaceOverride = <span class="keyword">new</span> ReplaceOverride(name, callback);</span><br><span class="line">         <span class="comment">// Look for arg-type match elements.</span></span><br><span class="line">         List&lt;Element&gt; argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT);</span><br><span class="line">         <span class="keyword">for</span> (Element argTypeEle : argTypeEles) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据方法参数类型来区分同名的不同的方法</span></span><br><span class="line">            String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE);</span><br><span class="line">            match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(match)) &#123;</span><br><span class="line">               replaceOverride.addTypeIdentifier(match);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         replaceOverride.setSource(extractSource(replacedMethodEle));</span><br><span class="line">         overrides.addOverride(replaceOverride);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>可以发现lookup-method和replace-method都放入了BeanDefinition的<strong>MethodOverrides</strong>类型的overrides属性中,也就是说,MethodOverrides包含了LookupOverride和ReplaceOverride两种类型的对象</p><hr><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lrj.test.bean.Replacement"</span> <span class="attr">id</span>=<span class="string">"replacement"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lrj.test.bean.Origin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replaced-method</span> <span class="attr">name</span>=<span class="string">"show"</span> <span class="attr">replacer</span>=<span class="string">"replacement"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg-type</span> <span class="attr">match</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">replaced-method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Origin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show str:"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show int:"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replacement</span> <span class="keyword">implements</span> <span class="title">MethodReplacer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">reimplement</span><span class="params">(Object obj, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a placement method......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个打印的将会是show str:hello和I am a placement method......</span></span><br><span class="line"><span class="comment">//说明int的被替换了,但是String的没有被替换,</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReplace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">    Origin origin = context.getBean(Origin<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    origin.show(<span class="string">"hello"</span>);</span><br><span class="line">    origin.show(<span class="number">555</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这个听说是在项目封版之后,不想改代码了,直接改配置,符合开闭原则,但是这个Replacement必须要实现MethodReplacer感觉有点鸡肋</p>        <h3   id="constructor-arg标签解析" >          <span class="heading-link">constructor-arg标签解析</span>        </h3>      <p>这个没啥讲的,无非是根据index或者name来设置</p><p>不过需要注意ConstructorArgumentValues对象保存了ValueHolder集合</p><p>解析construct-arg标签,读取下标或者name封装成<strong>ValueHolder</strong>,构成BeanDefinition的<strong>ConstructorArgumentValues</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseConstructorArgElements</span><span class="params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) &#123;</span><br><span class="line">         parseConstructorArgElement((Element) node, bd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseConstructorArgElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">    String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</span><br><span class="line">    String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(indexAttr)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> index = Integer.parseInt(indexAttr);</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error(<span class="string">"'index' cannot be lower than 0"</span>, ele);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> ConstructorArgumentEntry(index));</span><br><span class="line">                    Object value = parsePropertyValue(ele, bd, <span class="keyword">null</span>);</span><br><span class="line">                    ConstructorArgumentValues.ValueHolder valueHolder = <span class="keyword">new</span> ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                        valueHolder.setType(typeAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                        valueHolder.setName(nameAttr);</span><br><span class="line">                    &#125;</span><br><span class="line">                    valueHolder.setSource(extractSource(ele));</span><br><span class="line">                    <span class="keyword">if</span> (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</span><br><span class="line">                        error(<span class="string">"Ambiguous constructor-arg entries for index "</span> + index, ele);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//将ValueHolder添加到BeanDefinition</span></span><br><span class="line">                        bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NumberFormatException ex) &#123;</span><br><span class="line">            error(<span class="string">"Attribute 'index' of tag 'constructor-arg' must be an integer"</span>, ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> ConstructorArgumentEntry());</span><br><span class="line">            Object value = parsePropertyValue(ele, bd, <span class="keyword">null</span>);</span><br><span class="line">            ConstructorArgumentValues.ValueHolder valueHolder = <span class="keyword">new</span> ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                valueHolder.setType(typeAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                valueHolder.setName(nameAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            valueHolder.setSource(extractSource(ele));</span><br><span class="line">            <span class="comment">//将ValueHolder添加到BeanDefinition</span></span><br><span class="line">            bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3   id="property标签解析" >          <span class="heading-link">property标签解析</span>        </h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parsePropertyElements</span><span class="params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">         parsePropertyElement((Element) node, bd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parsePropertyElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取name属性</span></span><br><span class="line">    String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">        error(<span class="string">"Tag 'property' must have a 'name' attribute"</span>, ele);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> PropertyEntry(propertyName));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">            error(<span class="string">"Multiple 'property' definitions for property '"</span> + propertyName + <span class="string">"'"</span>, ele);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line">        <span class="comment">//将属性设置包装成 PropertyValue</span></span><br><span class="line">        PropertyValue pv = <span class="keyword">new</span> PropertyValue(propertyName, val);</span><br><span class="line">        parseMetaElements(ele, pv);</span><br><span class="line">        pv.setSource(extractSource(ele));</span><br><span class="line">        <span class="comment">//将 PropertyValue添加到BeanDefinition</span></span><br><span class="line">        bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>和解析构造函数的参数一样,对于property标签的解析,同样是将key,value封装成<strong>PropertyValue</strong>,添加到BeanDefinition中,形成<strong>MutablePropertyValues</strong>类型</p>        <h3   id="qualifier标签解析" >          <span class="heading-link">qualifier标签解析</span>        </h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseQualifierElements</span><span class="params">(Element beanEle, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ELEMENT)) &#123;</span><br><span class="line">         parseQualifierElement((Element) node, bd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseQualifierElement</span><span class="params">(Element ele, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class="line">    String typeName = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasLength(typeName)) &#123;</span><br><span class="line">        error(<span class="string">"Tag 'qualifier' must have a 'type' attribute"</span>, ele);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> QualifierEntry(typeName));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        AutowireCandidateQualifier qualifier = <span class="keyword">new</span> AutowireCandidateQualifier(typeName);</span><br><span class="line">        qualifier.setSource(extractSource(ele));</span><br><span class="line">        String value = ele.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(value)) &#123;</span><br><span class="line">            qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value);</span><br><span class="line">        &#125;</span><br><span class="line">        NodeList nl = ele.getChildNodes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) &#123;</span><br><span class="line">                Element attributeEle = (Element) node;</span><br><span class="line">                String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">                String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasLength(attributeName) &amp;&amp; StringUtils.hasLength(attributeValue)) &#123;</span><br><span class="line">                    BeanMetadataAttribute attribute = <span class="keyword">new</span> BeanMetadataAttribute(attributeName, attributeValue);</span><br><span class="line">                    attribute.setSource(extractSource(attributeEle));</span><br><span class="line">                    qualifier.addMetadataAttribute(attribute);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    error(<span class="string">"Qualifier 'attribute' tag must have a 'name' and 'value'"</span>, attributeEle);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bd.addQualifier(qualifier);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>至此,BeanDefinition的解析完成,此时再回到BeanDefinitionParserDelegate.parseBeanDefinitionElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">   String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">      aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   String beanName = id;</span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line">               <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//检查beanName是否重复</span></span><br><span class="line">   <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">      checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//点进去</span></span><br><span class="line">   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">   <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">               beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">               <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">               <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">               <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">               String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">               <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                  aliases.add(beanClassName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">               logger.trace(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这里返回的是,又对BeanDefinition做了一层包装,成BeanDefinitionHolder,形成name-&gt;BeanDefinition的映射</p>]]></content>
    
    <summary type="html">
    
      Spring解析xml成BeanDefinition的过程。
    
    </summary>
    
    
      <category term="Spring" scheme="https://lurongjiang.github.io/categories/Spring/"/>
    
      <category term="SpringCore" scheme="https://lurongjiang.github.io/categories/Spring/SpringCore/"/>
    
    
      <category term="Spring" scheme="https://lurongjiang.github.io/tags/Spring/"/>
    
      <category term="BeanDefinition" scheme="https://lurongjiang.github.io/tags/BeanDefinition/"/>
    
  </entry>
  
  <entry>
    <title>Gradle的安装和使用</title>
    <link href="https://lurongjiang.github.io/2020/01/15/Gradle-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://lurongjiang.github.io/2020/01/15/Gradle-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-15T04:45:14.000Z</published>
    <updated>2020-01-16T08:14:14.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="Gradle的安装和使用" >          <span class="heading-link">Gradle的安装和使用</span>        </h1>              <h2   id="下载" >          <span class="heading-link">下载</span>        </h2>      <p>可以去Gradle官网下载最新的稳定版本,目前是6.2,我自己下的4.8.1</p><p><span class="external-link"><a   href="https://downloads.gradle-dn.com/distributions/gradle-4.8.1-bin.zip"  target="_blank" rel="noopener">https://downloads.gradle-dn.com/distributions/gradle-4.8.1-bin.zip</a><i class="fa fa-external-link"></i></span></p>        <h2   id="安装" >          <span class="heading-link">安装</span>        </h2>      <p>Gradle的安装和Maven类似,就简单的解压,配置环境变量到Path就ok了</p><p><img src="/images/image/image-20200221102147192.png" alt="image-20200221102147192"></p><p><img src="/images/image/image-20200221102231848.png" alt="image-20200221102231848"></p><p>配置完成之后,打开cmd查看一下是否配置好了</p><p><img src="/images/image/image-20200221102351240.png" alt="image-20200221102351240"></p><p>看到正确输出了gradle的版本就说明配置好了</p>        <h2   id="IDEA配置Gradle" >          <span class="heading-link">IDEA配置Gradle</span>        </h2>      <p>Gradle和Maven这一点不同,Gradle无需再IDEA中进行配置操作,本地仓库地址的配置可以再IDEA中配置</p><p><img src="/images/image/image-20200221102917822.png" alt="image-20200221102917822"></p><p>这个我用的是环境变量来配置的,IDEA会自动识别,只需要在环境变量中新建一个GRADLE_USER_HOME变量指向自己的本地仓库地址就可以了</p><p><img src="/images/image/image-20200221103016741.png" alt="image-20200221103016741"></p>        <h2   id="Gradle初体验" >          <span class="heading-link">Gradle初体验</span>        </h2>              <h3   id="新建Gradle工程" >          <span class="heading-link">新建Gradle工程</span>        </h3>      <p>选择Gradle和JDK</p><p><img src="/images/image/image-20200221103418062.png" alt="image-20200221103418062"></p>        <h3   id="填写项目的GAV" >          <span class="heading-link">填写项目的GAV</span>        </h3>      <p>填写项目的GAV坐标,点Finished</p><p><img src="/images/image/image-20200221103642260.png" alt="image-20200221103642260"></p>        <h3   id="Gradle的目录" >          <span class="heading-link">Gradle的目录</span>        </h3>      <p>Gradle的目录结构和Maven类似</p><p><img src="/images/image/image-20200221104845138.png" alt="image-20200221104845138"></p><ul><li><p>src就是source目录</p><ul><li>src/main放代码目录<ul><li>src/main/java 放java代码目录</li><li>src/main/resouces放资源文件</li></ul></li></ul></li><li><p>src/test是测试目录</p><ul><li>src/test/java 放测试的java代码目录</li><li>src/test/resouces放测试的资源文件</li></ul></li></ul>        <h2   id="Groovy编程" >          <span class="heading-link">Groovy编程</span>        </h2>              <h3   id="打开Groovy-Console" >          <span class="heading-link">打开Groovy Console</span>        </h3>      <p>Tools-&gt;Groovy Console</p><p><img src="/images/image/image-20200221105555961.png" alt="image-20200221105555961"></p>        <h3   id="HelloWorld" >          <span class="heading-link">HelloWorld</span>        </h3>      <p>凡事先HelloWorld一下</p><p><img src="/images/image/image-20200221105836306.png" alt="image-20200221105836306"></p><p><img src="/images/image/image-20200221105915909.png" alt="image-20200221105915909"></p>        <h3   id="Groovy语法" >          <span class="heading-link">Groovy语法</span>        </h3>      <ul><li><p>Groovy可以省略最末尾的分号</p></li><li><p>Groovy可以省略小括号</p><p><img src="/images/image/image-20200221110227268.png" alt="image-20200221110227268"></p></li></ul><blockquote><p>这两个特性可以看出,Groovy的书写更加自由,随意</p></blockquote><ul><li><p>定义变量 def</p><p><img src="/images/image/image-20200221110338615.png" alt="image-20200221110338615"></p><p>groovy会根据数据自动推断类型</p></li><li><p>定义集合</p><p><img src="/images/image/image-20200221110630481.png" alt="image-20200221110630481"></p></li><li><p>定义Map</p><p><img src="/images/image/image-20200221110825151.png" alt="image-20200221110825151"></p></li><li><p>闭包</p><p>闭包就是一段代码块,在Gradle中主要是把闭包当参数使用</p><p><img src="/images/image/image-20200221111242382.png" alt="image-20200221111242382"></p></li><li><p>带参数的闭包</p><p><img src="/images/image/image-20200221111511073.png" alt="image-20200221111511073"></p></li></ul>        <h2   id="Gradle配置文件" >          <span class="heading-link">Gradle配置文件</span>        </h2>      <ul><li><p>build.gradle 构建项目配置</p><p><img src="/images/image/image-20200221112432889.png" alt="image-20200221112432889"></p></li></ul>        <h2   id="优先本地加载" >          <span class="heading-link">优先本地加载</span>        </h2>      <p>在repositories中指定先从本地加载</p><p><img src="/images/image/image-20200221113447193.png" alt="image-20200221113447193"></p>]]></content>
    
    <summary type="html">
    
      和Maven类似的项目依赖管理和构建工具Gradle的简单教程
    
    </summary>
    
    
      <category term="Gradle" scheme="https://lurongjiang.github.io/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="https://lurongjiang.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Redis缓存问题</title>
    <link href="https://lurongjiang.github.io/2019/10/11/Redis-Redis-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>https://lurongjiang.github.io/2019/10/11/Redis-Redis-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</id>
    <published>2019-10-11T02:23:09.000Z</published>
    <updated>2019-10-14T03:58:37.000Z</updated>
    
    <content type="html"><![CDATA[        <h2   id="Redis缓存问题" >          <span class="heading-link">Redis缓存问题</span>        </h2>              <h3   id="缓存穿透" >          <span class="heading-link">缓存穿透</span>        </h3>      <p>恶意用户刻意伪造数据库不存在的数据进行大量访问,此时,由于数据库中没有,Redis也没把该信息缓存,请求过来之后,发现缓存没有,就去数据库中查找,而短时间内这样的大量请求会导致数据库负载压力大,甚至崩溃</p>        <h4   id="解决方案" >          <span class="heading-link">解决方案</span>        </h4>      <ol><li><p>非法请求赋值一个特殊值,下次请求时,不查数据库</p></li><li><p>布隆过滤器</p><p>将可能出现的结果映射到一个大的集合,每次都从集合中获取</p></li></ol>        <h3   id="缓存雪崩" >          <span class="heading-link">缓存雪崩</span>        </h3>      <p>如果key的过期周期都差不多,在一段时间内没用访问之后,所有key的缓存都失效了,此时,如果大量请求过来,那么请求也都落到数据库,数据库瞬间崩盘</p>        <h4   id="解决方案-1" >          <span class="heading-link">解决方案</span>        </h4>      <ul><li>过期时间设置可以包含一定的随机数,保证不会同时失效,也就是时间错开</li><li>使用setnx设置互斥锁,当有一个线程去load数据到缓存时,其他只能在队列等待,当load回来之后,如果命中就不需要去数据库查找了</li></ul>        <h3   id="缓存击穿" >          <span class="heading-link">缓存击穿</span>        </h3>      <p>热点数据的缓存失效,如果短时间内大量请求,也会对数据库造成压力甚至崩溃</p>        <h4   id="解决方案-2" >          <span class="heading-link">解决方案</span>        </h4>      <ul><li>数据预热,提前对热点数据加载到缓存</li><li>使用互斥锁加载数据到缓存</li><li>热点数据生命周期设置为不过期,热度过去之后再设置为常规声明周期</li></ul>]]></content>
    
    <summary type="html">
    
      Redis缓存穿透,雪崩,穿透是怎么回事,如何解决这些问题
    
    </summary>
    
    
      <category term="Redis" scheme="https://lurongjiang.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://lurongjiang.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CDH-镜像恢复</title>
    <link href="https://lurongjiang.github.io/2019/09/03/CDH-CDH%E9%95%9C%E5%83%8F%E6%81%A2%E5%A4%8D/"/>
    <id>https://lurongjiang.github.io/2019/09/03/CDH-CDH%E9%95%9C%E5%83%8F%E6%81%A2%E5%A4%8D/</id>
    <published>2019-09-03T09:15:01.000Z</published>
    <updated>2019-09-08T04:04:30.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="CDH镜像恢复" >          <span class="heading-link">CDH镜像恢复</span>        </h1>      <p>阿里云使用oss对cdh集群进行了快照存储,需要使用时,需要使用镜像来创建实例,以恢复cdh集群</p><ul><li><p>镜像创建实例</p><p>选择按量付费</p></li><li><p>检查mysql是否正常</p></li><li><p>修改hosts</p><p>镜像恢复之后,内网地址发生了变化,所以需要再次进行hosts的修改</p></li><li><p>检查cm-server</p><p>db.properties</p><p>com.cloudera.cmf.db.hostname=xx</p></li><li><p>检查cm-agent</p><p>config.ini</p><p>server_host=xxx</p></li><li><p>检查mysql</p><p>cmf库的hosts</p><p>update为相应的host</p></li><li><p>启动cm-server</p></li><li><p>启动agent</p></li><li><p>web界面启动scm,cdh</p></li></ul>]]></content>
    
    <summary type="html">
    
      CDH-镜像恢复
    
    </summary>
    
    
      <category term="CDH" scheme="https://lurongjiang.github.io/categories/CDH/"/>
    
    
      <category term="CDH" scheme="https://lurongjiang.github.io/tags/CDH/"/>
    
  </entry>
  
  <entry>
    <title>CDH-卸载</title>
    <link href="https://lurongjiang.github.io/2019/08/30/CDH-CDH%E7%9A%84%E5%8D%B8%E8%BD%BD/"/>
    <id>https://lurongjiang.github.io/2019/08/30/CDH-CDH%E7%9A%84%E5%8D%B8%E8%BD%BD/</id>
    <published>2019-08-30T14:27:45.000Z</published>
    <updated>2019-09-07T14:46:55.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="CDH的卸载" >          <span class="heading-link">CDH的卸载</span>        </h1>              <h2   id="卸载前规划" >          <span class="heading-link">卸载前规划</span>        </h2>      <ul><li>关闭集群和MySQL</li><li>删除部署文件 /opt/cloudera*</li><li>删除数据文件夹 /etc/xxx</li></ul>        <h2   id="存储目录" >          <span class="heading-link">存储目录</span>        </h2>      <p>web-&gt;cluster-&gt;服务-&gt;选择对应的Configuration-&gt;data directory</p><p> 如</p><p>/dfs/nn</p><p>/dfs/dn</p><p>/dfs/snn</p><p>/yarn/nm</p><p>/var/lib/zookeeper</p>        <h2   id="卸载" >          <span class="heading-link">卸载</span>        </h2>      <ul><li><p>web</p><ul><li><p>关闭scm</p></li><li><p>关闭cdh</p></li></ul></li><li><p>服务器</p><ul><li><p>mysql</p><ul><li>drop database cmf</li><li>drop user cmf</li><li>drop user amon</li></ul></li><li><p>关闭agent</p></li><li><p>关闭server</p></li><li><p>关闭cloudera进程</p><p>kill -9 $(pgrep -f cloudera)</p></li><li><p>校验df -h</p><p>umount xx</p></li></ul></li><li><p>部署文件夹删除,/opt/cloudera*</p></li><li><p>删除隐藏文件</p><ul><li>/tmp/scm*</li><li>/tmp/.scm*</li></ul></li><li><p>全局搜索</p><p>find / -name ‘*clouder*‘</p></li><li><p>/etc/alternatives动态管理,软连接删除</p></li></ul>]]></content>
    
    <summary type="html">
    
      CDH-卸载
    
    </summary>
    
    
      <category term="CDH" scheme="https://lurongjiang.github.io/categories/CDH/"/>
    
    
      <category term="CDH" scheme="https://lurongjiang.github.io/tags/CDH/"/>
    
      <category term="CM" scheme="https://lurongjiang.github.io/tags/CM/"/>
    
  </entry>
  
  <entry>
    <title>CDH-集群部署</title>
    <link href="https://lurongjiang.github.io/2019/08/28/CDH-CHD%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://lurongjiang.github.io/2019/08/28/CDH-CHD%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2019-08-28T12:52:49.000Z</published>
    <updated>2019-09-11T14:01:27.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="CHD集群部署" >          <span class="heading-link">CHD集群部署</span>        </h1>              <h2   id="软件" >          <span class="heading-link">软件</span>        </h2>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CM5.16.1</span><br><span class="line">http:&#x2F;&#x2F;archive.cloudera.com&#x2F;cm5&#x2F;cm&#x2F;5&#x2F;cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">CDH5.16.1</span><br><span class="line">http:&#x2F;&#x2F;archive.cloudera.com&#x2F;cdh5&#x2F;parcels&#x2F;5.16.1&#x2F;CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel</span><br><span class="line">http:&#x2F;&#x2F;archive.cloudera.com&#x2F;cdh5&#x2F;parcels&#x2F;5.16.1&#x2F;CDH-5.16.1-1.cdh5.16.2.p0.3-el7.parcel.sha1</span><br><span class="line">http:&#x2F;&#x2F;archive.cloudera.com&#x2F;cdh5&#x2F;parcels&#x2F;5.16.1&#x2F;manifest.json</span><br></pre></td></tr></table></div></figure>        <h2   id="集群规划" >          <span class="heading-link">集群规划</span>        </h2>      <div class="table-container"><table><thead><tr><th>节点</th><th>部署</th></tr></thead><tbody><tr><td>hadoop001</td><td>mysql,cm-server,cm-agent,nn,sn,dn,rm,nm,zk,kafka-broker</td></tr><tr><td>hadoop002</td><td>cm-agent,dn,nm,zk,kafka-broker</td></tr><tr><td>hadoop003</td><td>cm-agent,dn,nm,zk,kafka-broker</td></tr></tbody></table></div>        <h2   id="关闭防火墙" >          <span class="heading-link">关闭防火墙</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">iptables -F</span><br></pre></td></tr></table></div></figure>        <h2   id="关闭selinux" >          <span class="heading-link">关闭selinux</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=diabled</span><br></pre></td></tr></table></div></figure>        <h2   id="时间同步ntp-云主机忽略" >          <span class="heading-link">时间同步ntp(云主机忽略)</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line">timedatectl</span><br><span class="line">timedatectl list-timezones</span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br></pre></td></tr></table></div></figure><p>选取hadoop001作为ntp主节点</p><p>hadoop002,hadoop003为从节点</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line">vi /etc/ntp.cnf</span><br><span class="line"><span class="comment"># 设置time</span></span><br><span class="line">server 1.aisa.pool.ntp.org</span><br><span class="line">server 2.aisa.pool.ntp.org</span><br><span class="line">server 3.aisa.pool.ntp.org</span><br><span class="line"><span class="comment"># 当外部time不可用,使用本机</span></span><br><span class="line">server 127.0.0.1 inburst <span class="built_in">local</span> lock</span><br><span class="line"><span class="comment"># 允许哪些网段可以来同步时间</span></span><br><span class="line">restrict hadoop002 mask 255.255.255.0 nomodify notrap</span><br><span class="line">restrict hadoop003 mask 255.255.255.0 nomodify notrap</span><br><span class="line"><span class="comment"># 启动ntp</span></span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl restart ntpd</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status ntpd</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">ntp -q</span><br></pre></td></tr></table></div></figure><p>另外节点不需要ntp,关闭ntp</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop ntpd</span><br><span class="line">systemctl <span class="built_in">disable</span> ntpd</span><br></pre></td></tr></table></div></figure><p>同步hadoop001时间</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate hadoop001</span><br></pre></td></tr></table></div></figure><p>配置crontab进行定时同步</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天0点0分同步ntp</span></span><br><span class="line">crontab -e</span><br><span class="line">0 0 * * * ntpdate hadoop001</span><br><span class="line"><span class="comment"># 查看定时任务</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></div></figure>        <h2   id="免密登录" >          <span class="heading-link">免密登录</span>        </h2>      <p>为了方便拷贝东西,做一下免密</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen <span class="comment">#之后一路enter</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub <span class="comment"># 将三台的公钥拷贝到文本中</span></span><br><span class="line"><span class="comment"># 将公钥写入三台的authorized_keys</span></span><br><span class="line">vi ~/.ssh/authorized_keys </span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">ssh hadoop001 date</span><br><span class="line">ssh hadoop002 date</span><br><span class="line">ssh hadoop003 date</span><br></pre></td></tr></table></div></figure>        <h2   id="拷贝文件到另外两台" >          <span class="heading-link">拷贝文件到另外两台</span>        </h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r hadoop001:~/cdh5.16.1/* ~/cdh5.16.1/</span><br></pre></td></tr></table></div></figure>        <h2   id="部署JDK" >          <span class="heading-link">部署JDK</span>        </h2>      <p><u>jdk统一部署到/usr/java下,避免乱七八糟的错误</u></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u45-linux-x64.gz</span><br><span class="line">mkdir /usr/java</span><br><span class="line">mv ./jdk1.8.0_45 /usr/java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chown -R root:root /usr/java/jdk1.8.0_45</span><br><span class="line">ln -s /usr/java/jdk1.8.0_45 /usr/java/java8</span><br><span class="line"></span><br><span class="line">vi ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/java8</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 查看一下jdk版本</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></div></figure>        <h2   id="部署MySQL" >          <span class="heading-link">部署MySQL</span>        </h2>              <h3   id="解压" >          <span class="heading-link">解压</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz</span><br><span class="line">chown -R root:root ./*</span><br><span class="line">ln -s /root/cdh5.16.1/mysql-5.7.11-linux-glibc2.5-x86_64 /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/mysql/arch /usr/<span class="built_in">local</span>/mysql/data /usr/<span class="built_in">local</span>/mysql/tmp</span><br></pre></td></tr></table></div></figure>        <h3   id="my-cnf" >          <span class="heading-link">my.cnf</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/my.cnf /etc/my.cnf.bak</span><br><span class="line">vi /etc/my.cnf <span class="comment">#先清空</span></span><br></pre></td></tr></table></div></figure><p>配置my.cnf</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;mysql.sock</span><br><span class="line">default-character-set&#x3D;utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">skip-slave-start</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size &#x3D; 256M</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 4M</span><br><span class="line">query_cache_size&#x3D; 32M</span><br><span class="line">max_allowed_packet &#x3D; 16M</span><br><span class="line">myisam_sort_buffer_size&#x3D;128M</span><br><span class="line">tmp_table_size&#x3D;32M</span><br><span class="line"></span><br><span class="line">table_open_cache &#x3D; 512</span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line">wait_timeout &#x3D; 86400</span><br><span class="line">interactive_timeout &#x3D; 86400</span><br><span class="line">max_connections &#x3D; 600</span><br><span class="line"></span><br><span class="line"># Try number of CPU&#39;s*2 for thread_concurrency</span><br><span class="line">#thread_concurrency &#x3D; 32 </span><br><span class="line"></span><br><span class="line">#isolation level and default engine </span><br><span class="line">default-storage-engine &#x3D; INNODB</span><br><span class="line">transaction-isolation &#x3D; READ-COMMITTED</span><br><span class="line"></span><br><span class="line">server-id  &#x3D; 1739</span><br><span class="line">basedir     &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">datadir     &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">pid-file     &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;hostname.pid</span><br><span class="line"></span><br><span class="line">#open performance schema</span><br><span class="line">log-warnings</span><br><span class="line">sysdate-is-now</span><br><span class="line"></span><br><span class="line">binlog_format &#x3D; ROW</span><br><span class="line">log_bin_trust_function_creators&#x3D;1</span><br><span class="line">log-error  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;hostname.err</span><br><span class="line">log-bin &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;arch&#x2F;mysql-bin</span><br><span class="line">expire_logs_days &#x3D; 7</span><br><span class="line"></span><br><span class="line">innodb_write_io_threads&#x3D;16</span><br><span class="line"></span><br><span class="line">relay-log  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;relay_log&#x2F;relay-log</span><br><span class="line">relay-log-index &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;relay_log&#x2F;relay-log.index</span><br><span class="line">relay_log_info_file&#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;relay_log&#x2F;relay-log.info</span><br><span class="line"></span><br><span class="line">log_slave_updates&#x3D;1</span><br><span class="line">gtid_mode&#x3D;OFF</span><br><span class="line">enforce_gtid_consistency&#x3D;OFF</span><br><span class="line"></span><br><span class="line"># slave</span><br><span class="line">slave-parallel-type&#x3D;LOGICAL_CLOCK</span><br><span class="line">slave-parallel-workers&#x3D;4</span><br><span class="line">master_info_repository&#x3D;TABLE</span><br><span class="line">relay_log_info_repository&#x3D;TABLE</span><br><span class="line">relay_log_recovery&#x3D;ON</span><br><span class="line"></span><br><span class="line">#other logs</span><br><span class="line">#general_log &#x3D;1</span><br><span class="line">#general_log_file  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;general_log.err</span><br><span class="line">#slow_query_log&#x3D;1</span><br><span class="line">#slow_query_log_file&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;slow_log.err</span><br><span class="line"></span><br><span class="line">#for replication slave</span><br><span class="line">sync_binlog &#x3D; 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#for innodb options </span><br><span class="line">innodb_data_home_dir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;</span><br><span class="line">innodb_data_file_path &#x3D; ibdata1:1G;ibdata2:1G:autoextend</span><br><span class="line"></span><br><span class="line">innodb_log_group_home_dir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;arch</span><br><span class="line">innodb_log_files_in_group &#x3D; 4</span><br><span class="line">innodb_log_file_size &#x3D; 1G</span><br><span class="line">innodb_log_buffer_size &#x3D; 200M</span><br><span class="line"></span><br><span class="line">#根据生产需要，调整pool size </span><br><span class="line">innodb_buffer_pool_size &#x3D; 2G</span><br><span class="line">#innodb_additional_mem_pool_size &#x3D; 50M #deprecated in 5.6</span><br><span class="line">tmpdir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;tmp</span><br><span class="line"></span><br><span class="line">innodb_lock_wait_timeout &#x3D; 1000</span><br><span class="line">#innodb_thread_concurrency &#x3D; 0</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 2</span><br><span class="line"></span><br><span class="line">innodb_locks_unsafe_for_binlog&#x3D;1</span><br><span class="line"></span><br><span class="line">#innodb io features: add for mysql5.5.8</span><br><span class="line">performance_schema</span><br><span class="line">innodb_read_io_threads&#x3D;4</span><br><span class="line">innodb-write-io-threads&#x3D;4</span><br><span class="line">innodb-io-capacity&#x3D;200</span><br><span class="line">#purge threads change default(0) to 1 for purge</span><br><span class="line">innodb_purge_threads&#x3D;1</span><br><span class="line">innodb_use_native_aio&#x3D;on</span><br><span class="line"></span><br><span class="line">#case-sensitive file names and separate tablespace</span><br><span class="line">innodb_file_per_table &#x3D; 1</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 128M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line">default-character-set&#x3D;utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 256M</span><br><span class="line">sort_buffer_size &#x3D; 256M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br></pre></td></tr></table></div></figure>        <h3   id="配置用户组" >          <span class="heading-link">配置用户组</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 101 dba</span><br><span class="line">useradd -u 514 -g dba -G root -d /usr/<span class="built_in">local</span>/mysql mysqladmin</span><br><span class="line"><span class="comment"># 查看一下 uid=514(mysqladmin) gid=101(dba) groups=101(dba),0(root)</span></span><br><span class="line">id mysqladmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝环境变量文件到mysqladmin home目录</span></span><br><span class="line">cp /etc/skel/.* /usr/<span class="built_in">local</span>/mysql5.7</span><br></pre></td></tr></table></div></figure>        <h3   id="配置mysqladmin环境变量" >          <span class="heading-link">配置mysqladmin环境变量</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - mysqladmin</span><br><span class="line">vi .bash_profile</span><br></pre></td></tr></table></div></figure><p>追加</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export MYSQL_BASE&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">export PATH&#x3D;$&#123;MYSQL_BASE&#125;&#x2F;bin:$PATH</span><br><span class="line">unset USERNAME</span><br><span class="line">set umask to 022</span><br><span class="line">umask 022</span><br><span class="line">PS1&#x3D;&#96;uname -n&#96;&quot;:&quot;&#39;$USER&#39;&quot;:&quot;&#39;$PWD&#39;&quot;:&gt;&quot;; export PS1</span><br></pre></td></tr></table></div></figure>        <h3   id="修改权限" >          <span class="heading-link">修改权限</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown  mysqladmin:dba /etc/my.cnf</span><br><span class="line">chmod  640 /etc/my.cnf</span><br><span class="line">chown -R mysqladmin:dba /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">chmod -R 755 /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></div></figure>        <h3   id="自启动配置" >          <span class="heading-link">自启动配置</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server /etc/rc.d/init.d/mysql</span><br><span class="line">chmod +x /etc/rc.d/init.d/mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig --level 345 mysql on</span><br></pre></td></tr></table></div></figure>        <h3   id="按照mysql依赖" >          <span class="heading-link">按照mysql依赖</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libaio</span><br><span class="line">su - mysqladmin</span><br></pre></td></tr></table></div></figure>        <h3   id="初始化mysql" >          <span class="heading-link">初始化mysql</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo su - mysqladmin</span><br><span class="line">bin/mysqld \</span><br><span class="line">--defaults-file=/etc/my.cnf \</span><br><span class="line">--user=mysqladmin \</span><br><span class="line">--basedir=/usr/<span class="built_in">local</span>/mysql/ \</span><br><span class="line">--datadir=/usr/<span class="built_in">local</span>/mysql/data/ \</span><br><span class="line">--initialize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待初始化完成后 eC%gbl&gt;g3KUJ</span></span><br><span class="line">cat data/hostname.err|grep password</span><br></pre></td></tr></table></div></figure>        <h3   id="启动mysql并修改密码" >          <span class="heading-link">启动mysql并修改密码</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf &amp;</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码,赋权</span></span><br><span class="line">alter user root@localhost identified by <span class="string">'root@1234'</span>;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'root@1234'</span> ;</span><br><span class="line">create  database cmf default character <span class="built_in">set</span> utf8;</span><br><span class="line">GRANT ALL PRIVILEGES ON cmf.* TO <span class="string">'cmf'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'cmf@1234'</span> ;</span><br><span class="line">create  database amon default character <span class="built_in">set</span> utf8;</span><br><span class="line">GRANT ALL PRIVILEGES ON amon.* TO <span class="string">'amon'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'amon@1234'</span> ;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></div></figure>        <h3   id="上传mysql-jar" >          <span class="heading-link">上传mysql jar</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/share/java</span><br><span class="line"><span class="built_in">cd</span> /usr/share/java</span><br><span class="line">rz</span><br><span class="line">scp ./mysql-connector-java-5.1.47.jar hadoop002:/usr/share/java</span><br><span class="line">scp ./mysql-connector-java-5.1.47.jar hadoop003:/usr/share/java</span><br></pre></td></tr></table></div></figure>        <h2   id="安装CM" >          <span class="heading-link">安装CM</span>        </h2>              <h3   id="解压-1" >          <span class="heading-link">解压</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/cm</span><br><span class="line">tar -zxvf cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz -C /opt/cm</span><br></pre></td></tr></table></div></figure>        <h3   id="配置agent" >          <span class="heading-link">配置agent</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/cm/cm-5.16.1/etc/cloudera-scm-agent</span><br><span class="line">vi config.ini</span><br><span class="line"><span class="comment"># 配置cmd_server</span></span><br><span class="line">server_host=hadoop001</span><br></pre></td></tr></table></div></figure>        <h3   id="配置cm-server" >          <span class="heading-link">配置cm-server</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/cm/cm-5.16.1/etc/cloudera-scm-server</span><br><span class="line">vi db.properties</span><br><span class="line">com.cloudera.cmf.db.host=hadoop001</span><br><span class="line">com.cloudera.cmf.db.name=cmf</span><br><span class="line">com.cloudera.cmf.db.password=cmf@1234</span><br><span class="line">com.cloudera.cmf.db.setupType=EXTERNAL</span><br></pre></td></tr></table></div></figure>        <h3   id="添加用户" >          <span class="heading-link">添加用户</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useradd --system \</span><br><span class="line">--home=/opt/cm/cm-5.16.1/run/cloudera-scm-server \</span><br><span class="line">--no-create-home \</span><br><span class="line">--shell=/bin/<span class="literal">false</span> \</span><br><span class="line">--comment=<span class="string">'ClouderManager User'</span> \</span><br><span class="line">cloudmanager</span><br></pre></td></tr></table></div></figure>        <h3   id="修改权限-1" >          <span class="heading-link">修改权限</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R cloudmanager:cloudmanager /opt/cm</span><br></pre></td></tr></table></div></figure>        <h2   id="Parcel部署" >          <span class="heading-link">Parcel部署</span>        </h2>      <p>parcel将hdfs,zk,kafka等组件做了自己的版本兼容修改,打成自己的包</p>        <h3   id="校验" >          <span class="heading-link">校验</span>        </h3>      <p>记得校验一下是否下载完整了,相同就是下载完成了,否则安装时会继续下载</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1 CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha</span><br><span class="line">cat  CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha</span><br><span class="line">sha1sum CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel</span><br></pre></td></tr></table></div></figure>        <h3   id="部署准备" >          <span class="heading-link">部署准备</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/cloudera/parcel-repo</span><br><span class="line">mv CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel* /opt/cloudera/parcel-repo</span><br><span class="line">mv manifest.json /opt/cloudera/parcel-repo</span><br><span class="line">chown -R cloudmanager:cloudmanager /opt/cloudera</span><br></pre></td></tr></table></div></figure>        <h2   id="正式集群部署" >          <span class="heading-link">正式集群部署</span>        </h2>              <h3   id="创建目录和用户" >          <span class="heading-link">创建目录和用户</span>        </h3>      <p>所有节点创建软件的安装目录,用户和用户组</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/cloudera/parcels</span><br><span class="line">chown -R cloudmanager:cloudmanager /opt/cloudera/</span><br></pre></td></tr></table></div></figure>        <h3   id="启动" >          <span class="heading-link">启动</span>        </h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先启动mysql</span></span><br><span class="line">sudo su - mysqladmin</span><br><span class="line">service mysql restart</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">cd</span> /opt/cm/cm-5.16.1/etc/init.d</span><br><span class="line">./cloudera-scm-server start</span><br></pre></td></tr></table></div></figure><p>发现报错了….</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install: invalid user ‘cloudera-scm’</span><br><span class="line">Starting cloudera-scm-server:                              [FAILED]</span><br></pre></td></tr></table></div></figure><p>还是老实用人家的默认用户cloudera-scm</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useradd --system \</span><br><span class="line">--home=/opt/cm/cm-5.16.1/run/cloudera-scm-server \</span><br><span class="line">--no-create-home \</span><br><span class="line">--shell=/bin/<span class="literal">false</span> \</span><br><span class="line">--comment=<span class="string">'ClouderManager User'</span> \</span><br><span class="line">cloudera-scm</span><br><span class="line"></span><br><span class="line">chown -R cloudera-scm:cloudera-scm /opt/cm</span><br><span class="line">chown -R cloudera-scm:cloudera-scm /opt/cloudera</span><br></pre></td></tr></table></div></figure><p>继续启动,发现还是报错了,查看一下日志</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailf -200 /opt/cm/cm-5.16.1/<span class="built_in">log</span>/cloudera-scm-server/cloudera-scm-server.log</span><br></pre></td></tr></table></div></figure><p><img src="/images/image/image-20200502112327363.png" alt="image-20200502112327363"></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /usr/share/java/mysql-connector-java-5.1.47.jar</span><br><span class="line"><span class="comment"># 这个一定要做,去掉版本号,否则不认</span></span><br><span class="line">mv /usr/share/java/mysql-connector-java-5.1.47.jar /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></div></figure>        <h3   id="安全组配置" >          <span class="heading-link">安全组配置</span>        </h3>      <p>开放7180</p><p>待程序启动后,访问7180端口,就可以看到cm界面了</p><p><img src="/images/image/image-20200502115719630.png" alt="image-20200502115719630"></p><p>默认账号密码就是admin/admin</p>        <h3   id="启动agent" >          <span class="heading-link">启动agent</span>        </h3>      <p>所有的agent启动</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/cm/cm-5.16.1/etc/init.d/cloudera-scm-agent start</span><br><span class="line">tailf -200 /opt/cm/cm-5.16.1/<span class="built_in">log</span>/cloudera-scm-agent/cloudera-scm-agent.log</span><br></pre></td></tr></table></div></figure>        <h3   id="配置cm" >          <span class="heading-link">配置cm</span>        </h3>      <ul><li><p>选择免费版</p></li><li><p>选择自己下载好的parcel版本,不然会重新下载,很慢</p></li><li><p>去掉警告</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></div></figure></li></ul><ul><li>选择自定义服务,按需安装hdfs,zk,yarn</li></ul>        <h2   id="关闭集群" >          <span class="heading-link">关闭集群</span>        </h2>      <ul><li><p>web界面关闭cdh和cms</p><p><img src="/images/image/image-20200502145018638.png" alt="image-20200502145018638"></p></li><li><p>关闭agent</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/cm/cm-5.16.1/etc/init.d/cloudera-scm-agent stop</span><br></pre></td></tr></table></div></figure></li></ul><ul><li><p>关闭server</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/cm/cm-5.16.1/etc/init.d/cloudera-scm-server stop</span><br></pre></td></tr></table></div></figure></li></ul><ul><li><p>关闭mysql</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - mysqladmin</span><br><span class="line">service mysql stop</span><br></pre></td></tr></table></div></figure></li><li><p>关闭实例</p></li><li><p>为实例创建镜像(需要购买OSS快照存储),释放实例</p></li></ul>]]></content>
    
    <summary type="html">
    
      CDH-集群部署详细文档
    
    </summary>
    
    
      <category term="CDH" scheme="https://lurongjiang.github.io/categories/CDH/"/>
    
    
      <category term="CDH" scheme="https://lurongjiang.github.io/tags/CDH/"/>
    
      <category term="CM" scheme="https://lurongjiang.github.io/tags/CM/"/>
    
  </entry>
  
  <entry>
    <title>SparkStreaming基础-SparkStreaming的tranform和与Kakfa集成</title>
    <link href="https://lurongjiang.github.io/2019/06/07/Spark-SparkStreaming-2/"/>
    <id>https://lurongjiang.github.io/2019/06/07/Spark-SparkStreaming-2/</id>
    <published>2019-06-07T06:57:53.000Z</published>
    <updated>2019-06-08T20:12:28.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkStreaming-2" >          <span class="heading-link">SparkStreaming-2</span>        </h1>              <h2   id="tranform" >          <span class="heading-link">tranform</span>        </h2>      <p>Spark Streaming接收到数据得到的是一个DStream,如果需要DStream和RDD进行关联,此时并没有DStream和RDD关联的API,所以需要tranform算子来进行DStream和RDD的关联</p><p>例如,我们只要统计指定的单词</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TransformApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createStreamContext</span></span>() = &#123;</span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"transformApp"</span>).setMaster(<span class="string">"local[2]"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="comment">//只统计hello,word</span></span><br><span class="line">      <span class="keyword">val</span> wordRDD = sc.parallelize(<span class="type">List</span>(<span class="string">"hello"</span>, <span class="string">"word"</span>)).map((_, <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">      <span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">updateState</span> </span>= (n: <span class="type">Seq</span>[<span class="type">Int</span>], o: <span class="type">Option</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> sum = n.sum + o.getOrElse(<span class="number">0</span>)</span><br><span class="line">        <span class="type">Some</span>(sum)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      stream.flatMap(_.split(<span class="string">","</span>)).map((_, <span class="number">1</span>)).transform(rdd =&gt; &#123;</span><br><span class="line">        rdd.join(wordRDD)</span><br><span class="line">      &#125;).map(t =&gt; (t._1, t._2._1)).updateStateByKey(updateState).print()</span><br><span class="line">      ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">      ssc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="type">StreamingContext</span>.getOrCreate(<span class="string">"checkpoint"</span>, createStreamContext)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2   id="Window" >          <span class="heading-link">Window</span>        </h2>      <p>滑窗有两个重要的概念</p><ul><li><em>window length</em> - 窗口的间隔</li><li><em>sliding interval</em> - 每次滑移的间隔</li></ul><p>这两个值必须是DStream的间隔时间的倍数,例如DStream可能为每5秒钟一次,window length=30s,则相当于每次的窗口数据包含了6个DStream间隔,silding interval=10s,那么就是10秒滑动一次</p><p>例如我们想,每隔10s统计30s中以内的wc</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WindowApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createStreamContext</span></span>() = &#123;</span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WindowApp"</span>).setMaster(<span class="string">"local[2]"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">      <span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">updateState</span> </span>= (seq: <span class="type">Seq</span>[<span class="type">Int</span>], oldValue: <span class="type">Option</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        <span class="type">Some</span>(seq.sum)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      stream.flatMap(_.split(<span class="string">","</span>)).map((_, <span class="number">1</span>))</span><br><span class="line">        .reduceByKeyAndWindow((a:<span class="type">Int</span>,b:<span class="type">Int</span>)=&gt;a+b, <span class="type">Seconds</span>(<span class="number">30</span>), <span class="type">Seconds</span>(<span class="number">10</span>))</span><br><span class="line">        .updateStateByKey(updateState).print()</span><br><span class="line">      ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">      ssc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="type">StreamingContext</span>.getOrCreate(<span class="string">"checkpoint"</span>, createStreamContext)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这样运行后就可以看到,不在时间范围内的就不会被统计</p><p><img src="/images/image/image-20200426014314067.png" alt="image-20200426014314067"></p>        <h2   id="Output-Operations-on-DStreams-输出算子" >          <span class="heading-link">Output Operations on DStreams 输出算子</span>        </h2>      <p>SparkStreaming作为流处理,一般不会输出到文件系统如hdfs,或者保存为文件,因为这样可能会导致大量的小文件问题,一般常用的算子为</p><ul><li><p>print</p></li><li><p>foreachRDD</p><p>使用最多的算子,在Streaming中,一般全都要使用foreachRDD来操作</p></li></ul><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ForeachRDDApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createStreamContext</span></span>() = &#123;</span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"ForeachRDDApp"</span>).setMaster(<span class="string">"local[2]"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">      <span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">updateState</span> </span>= (seq: <span class="type">Seq</span>[<span class="type">Int</span>], oldValue: <span class="type">Option</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        <span class="type">Some</span>(seq.sum)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      stream.flatMap(_.split(<span class="string">","</span>)).map((_, <span class="number">1</span>))</span><br><span class="line">        .reduceByKeyAndWindow((a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a + b, <span class="type">Seconds</span>(<span class="number">30</span>), <span class="type">Seconds</span>(<span class="number">10</span>))</span><br><span class="line">        .updateStateByKey(updateState).foreachRDD((rdd, time) =&gt; &#123;</span><br><span class="line">            <span class="comment">//也可以写到数据库,这里打印方便点</span></span><br><span class="line">        <span class="keyword">val</span> array = rdd.collect()</span><br><span class="line">        <span class="keyword">val</span> str = array.mkString(<span class="string">","</span>)</span><br><span class="line">        println(<span class="string">s"time:<span class="subst">$time</span>----&gt;<span class="subst">$str</span>"</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">      ssc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="type">StreamingContext</span>.getOrCreate(<span class="string">"checkpoint"</span>, createStreamContext)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行效果</p><p><img src="/images/image/image-20200426020128960.png" alt="image-20200426020128960"></p>        <h3   id="Design-Patterns-for-using-foreachRDD" >          <span class="heading-link">Design Patterns for using foreachRDD</span>        </h3>      <p>foreachRDD可以将数据写到外部系统中,但是使用不当会导致一些错误.常见错误如,创建连接,如何写到外部,但是由于连接之类的很少实现了序列化,所以会导致不能序列化的错误</p><p><strong>错误</strong>例子</p><p>连接创建在Driver端,但是使用是在worker端,这时需要序列化,所以这种用法是错误的</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dstream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">  <span class="keyword">val</span> connection = createNewConnection()  <span class="comment">// executed at the driver</span></span><br><span class="line">  rdd.foreach &#123; record =&gt;</span><br><span class="line">    connection.send(record) <span class="comment">// executed at the worker</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>另一种常见的<strong>错误</strong>用法是,每个rdd都创建连接,这样增加系统的负荷</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dstream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">  rdd.foreach &#123; record =&gt;</span><br><span class="line">    <span class="keyword">val</span> connection = createNewConnection()</span><br><span class="line">    connection.send(record)</span><br><span class="line">    connection.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>正确的方式</strong>是使用连接池,用完归还</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dstream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">  rdd.foreachPartition &#123; partitionOfRecords =&gt;</span><br><span class="line">    <span class="comment">// ConnectionPool is a static, lazily initialized pool of connections</span></span><br><span class="line">    <span class="keyword">val</span> connection = <span class="type">ConnectionPool</span>.getConnection()</span><br><span class="line">    partitionOfRecords.foreach(record =&gt; connection.send(record))</span><br><span class="line">    <span class="type">ConnectionPool</span>.returnConnection(connection)  <span class="comment">// return to the pool for future reuse</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>连接池的连接最好做成懒加载的模式,不使用一段时间后进行销毁,避免占用资源</p>        <h5   id="Other-points-to-remember" >          <span class="heading-link">Other points to remember</span>        </h5>      <ul><li>DStream只有遇到输出算子才会执行(和RDD的懒加载一样,只有遇到action才执行),DStream内部RDD的action会强制DStream处理接收到的数据,如果你的应用没有设置输出算子,或者只有foreachRDD算子而内部没有RDD的action算子,那么不会有任何输出</li></ul>        <h2   id="Input-DStreams-and-Receivers" >          <span class="heading-link">Input DStreams and Receivers</span>        </h2>              <h3   id="Basic-Sources" >          <span class="heading-link">Basic Sources</span>        </h3>              <h3   id="Advanced-Sources" >          <span class="heading-link">Advanced Sources</span>        </h3>              <h4   id="Kafka-Source" >          <span class="heading-link">Kafka Source</span>        </h4>      <p>Spark Streaming和Kafka集成的 0.10版本,Kafka的partition和SparkStreaming的partition是一致的,保持1:1</p>        <h5   id="添加依赖" >          <span class="heading-link">添加依赖</span>        </h5>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-10_$&#123;scala.tool.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h5   id="Creating-a-Direct-Stream" >          <span class="heading-link">Creating a Direct Stream</span>        </h5>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">KafkaStreamApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createStreamContext</span></span>() = &#123;</span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"KafkaStreamApp"</span>).setMaster(<span class="string">"local[2]"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">      <span class="keyword">val</span> kafkaParams = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>](</span><br><span class="line">        <span class="string">"bootstrap.servers"</span> -&gt; <span class="string">"hadoop001:9091,hadoop001:9092,hadoop001:9093"</span>,</span><br><span class="line">        <span class="string">"key.deserializer"</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">        <span class="string">"value.deserializer"</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">        <span class="string">"group.id"</span> -&gt; <span class="string">"myGroup"</span>,</span><br><span class="line">        <span class="string">"auto.offset.reset"</span> -&gt; <span class="string">"latest"</span>,</span><br><span class="line">        <span class="string">"enable.auto.commit"</span> -&gt; (<span class="literal">false</span>: java.lang.<span class="type">Boolean</span>)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> topics = <span class="type">Array</span>(<span class="string">"testA"</span>)</span><br><span class="line">      <span class="keyword">val</span> stream = <span class="type">KafkaUtils</span>.createDirectStream[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">        ssc,</span><br><span class="line">        <span class="type">PreferConsistent</span>,</span><br><span class="line">        <span class="type">Subscribe</span>[<span class="type">String</span>, <span class="type">String</span>](topics, kafkaParams)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">updateFunction</span></span>(newValues: <span class="type">Seq</span>[<span class="type">Int</span>], runningCount: <span class="type">Option</span>[<span class="type">Int</span>]): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">        <span class="type">Some</span>(newValues.sum)</span><br><span class="line">      &#125;</span><br><span class="line">      stream.map(record =&gt; (record.value,<span class="number">1</span>))</span><br><span class="line">        .reduceByKeyAndWindow((a:<span class="type">Int</span>,b:<span class="type">Int</span>)=&gt;a+b,<span class="type">Seconds</span>(<span class="number">10</span>),<span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">        .updateStateByKey(updateFunction).print()</span><br><span class="line">      ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">      ssc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="type">StreamingContext</span>.getOrCreate(<span class="string">"checkpoint"</span>, createStreamContext)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>创建消费者</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyKafkaProducer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> props = <span class="keyword">new</span> <span class="type">Properties</span>();</span><br><span class="line">    props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"hadoop001:9091,hadoop001:9092,hadoop001:9093"</span>)</span><br><span class="line">    props.put(<span class="string">"acks"</span>, <span class="string">"all"</span>)</span><br><span class="line">    props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>)</span><br><span class="line">    props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>)</span><br><span class="line">    <span class="keyword">val</span> producer = <span class="keyword">new</span> <span class="type">KafkaProducer</span>[<span class="type">String</span>, <span class="type">String</span>](props)</span><br><span class="line">    <span class="keyword">for</span> (x &lt;- <span class="number">0</span> to <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> a = '<span class="type">A</span>'</span><br><span class="line">      <span class="keyword">val</span> word = (<span class="type">Random</span>.nextInt(<span class="number">23</span>) + a).toChar+<span class="string">""</span></span><br><span class="line">      producer.send(<span class="keyword">new</span> <span class="type">ProducerRecord</span>[<span class="type">String</span>, <span class="type">String</span>](<span class="string">"testA"</span>, x%<span class="number">3</span>, x+<span class="string">""</span>, word))</span><br><span class="line">      <span class="type">TimeUnit</span>.<span class="type">MICROSECONDS</span>.sleep(<span class="number">200</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出</p><p><img src="/images/image/image-20200426033659694.png" alt="image-20200426033659694"></p>        <h5   id="Obtaining-Offsets获取偏移量" >          <span class="heading-link">Obtaining Offsets获取偏移量</span>        </h5>      <p>获取消费的偏移量</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">  <span class="keyword">val</span> offsetRanges = rdd.asInstanceOf[<span class="type">HasOffsetRanges</span>].offsetRanges</span><br><span class="line">  rdd.foreachPartition &#123; iter =&gt;</span><br><span class="line">    <span class="keyword">val</span> o: <span class="type">OffsetRange</span> = offsetRanges(<span class="type">TaskContext</span>.get.partitionId)</span><br><span class="line">    println(<span class="string">s"<span class="subst">$&#123;o.topic&#125;</span> <span class="subst">$&#123;o.partition&#125;</span> <span class="subst">$&#123;o.fromOffset&#125;</span> <span class="subst">$&#123;o.untilOffset&#125;</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5   id="Storing-Offsets存储偏移量" >          <span class="heading-link">Storing Offsets存储偏移量</span>        </h5>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">  <span class="keyword">val</span> offsetRanges = rdd.asInstanceOf[<span class="type">HasOffsetRanges</span>].offsetRanges</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some time later, after outputs have completed</span></span><br><span class="line">  stream.asInstanceOf[<span class="type">CanCommitOffsets</span>].commitAsync(offsetRanges)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5   id="设置kafka数据的偏移量" >          <span class="heading-link">设置kafka数据的偏移量</span>        </h5>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fromOffsets = selectOffsetsFromYourDatabase.map &#123; resultSet =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">TopicPartition</span>(resultSet.string(<span class="string">"topic"</span>), resultSet.int(<span class="string">"partition"</span>)) -&gt; resultSet.long(<span class="string">"offset"</span>)</span><br><span class="line">&#125;.toMap</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> stream = <span class="type">KafkaUtils</span>.createDirectStream[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">  streamingContext,</span><br><span class="line">  <span class="type">PreferConsistent</span>,</span><br><span class="line">  <span class="type">Assign</span>[<span class="type">String</span>, <span class="type">String</span>](fromOffsets.keys.toList, kafkaParams, fromOffsets)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">stream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">  <span class="keyword">val</span> offsetRanges = rdd.asInstanceOf[<span class="type">HasOffsetRanges</span>].offsetRanges</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> results = yourCalculation(rdd)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// begin your transaction</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// update results</span></span><br><span class="line">  <span class="comment">// update offsets where the end of existing offsets matches the beginning of this batch of offsets</span></span><br><span class="line">  <span class="comment">// assert that offsets were updated correctly</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// end your transaction</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      SparkStreaming基础-SparkStreaming的tranform操作和与kafka集成
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkStreaming" scheme="https://lurongjiang.github.io/categories/Spark/SparkStreaming/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkStreaming" scheme="https://lurongjiang.github.io/tags/SparkStreaming/"/>
    
      <category term="SparkStreaming-Kakfa" scheme="https://lurongjiang.github.io/tags/SparkStreaming-Kakfa/"/>
    
  </entry>
  
  <entry>
    <title>SparkStreaming基础-SparkStreaming的基本使用</title>
    <link href="https://lurongjiang.github.io/2019/05/20/Spark-SparkStream/"/>
    <id>https://lurongjiang.github.io/2019/05/20/Spark-SparkStream/</id>
    <published>2019-05-20T12:08:29.000Z</published>
    <updated>2019-05-24T11:55:21.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkStream-1" >          <span class="heading-link">SparkStream-1</span>        </h1>              <h2   id="SparkStream概述" >          <span class="heading-link">SparkStream概述</span>        </h2>      <ul><li>SparkCore的拓展</li><li>高吞吐量,容错在线流数据处理</li><li>数据源诸如:Kafka,Flume,TCP sockets</li><li>可以使用高阶函数来进行复炸的操作</li><li>可以输出到文件系统,数据库等</li><li>数据按时间间隔切分成批次交由Spark引擎处理</li></ul>        <h2   id="DStream概述" >          <span class="heading-link">DStream概述</span>        </h2>      <ul><li>基本抽象<strong>DStream</strong>,代表着连续的数据流</li><li>DStream可由Kafka,Flume,TCP socket产生</li></ul>        <h2   id="WordCount" >          <span class="heading-link">WordCount</span>        </h2>      <ul><li><p>首先创建SparkStream入口StreamContext</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"wc"</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></div></figure></li></ul><ul><li><p>socketTextStream</p><p>创建DStream</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br></pre></td></tr></table></div></figure></li><li><p>wc逻辑</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stream.flatMap(x =&gt; x.split(<span class="string">","</span>)).map((_, <span class="number">1</span>)).reduceByKey(_ + _).print()</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动stream</span></span><br><span class="line">ssc.start()</span><br><span class="line">ssc.awaitTermination()</span><br></pre></td></tr></table></div></figure></li></ul><blockquote><p>注意</p><p>socketTextStream底层会创建socket连接进行监听,所以core必须大于等于receiver数量,否则没有可用的core来处理数据,导致stream无限挂起</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketReceiver</span>[<span class="type">T</span>: <span class="type">ClassTag</span>](<span class="params"></span></span></span><br><span class="line"><span class="class"><span class="params">    host: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    port: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    bytesToObjects: <span class="type">InputStream</span> =&gt; <span class="type">Iterator</span>[<span class="type">T</span>],</span></span></span><br><span class="line"><span class="class"><span class="params">    storageLevel: <span class="type">StorageLevel</span></span></span></span><br><span class="line"><span class="class"><span class="params">  </span>) <span class="keyword">extends</span> <span class="title">Receiver</span>[<span class="type">T</span>](<span class="params">storageLevel</span>) <span class="keyword">with</span> <span class="title">Logging</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> socket: <span class="type">Socket</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">onStart</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    logInfo(<span class="string">s"Connecting to <span class="subst">$host</span>:<span class="subst">$port</span>"</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      socket = <span class="keyword">new</span> <span class="type">Socket</span>(host, port)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">ConnectException</span> =&gt;</span><br><span class="line">        restart(<span class="string">s"Error connecting to <span class="subst">$host</span>:<span class="subst">$port</span>"</span>, e)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    logInfo(<span class="string">s"Connected to <span class="subst">$host</span>:<span class="subst">$port</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the thread that receives data over a connection</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>(<span class="string">"Socket Receiver"</span>) &#123;</span><br><span class="line">      setDaemon(<span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() &#123; receive() &#125;</span><br><span class="line">    &#125;.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></blockquote><p><strong>注意点</strong>:</p><ul><li>streaming.start()之后,任何stream的操作都没用了,所以所有的额streaming操作都要在start之前</li><li>一旦stream stop,无法重启</li></ul>        <h2   id="DStream" >          <span class="heading-link">DStream</span>        </h2>      <ul><li><p>DStream是一系列的RDD,按时间间隔切分</p><p><img src="/images/image/image-20200425212811895.png" alt="image-20200425212811895"></p></li><li><p>对DStream的转换操作就是对DStream代表的所以RDD进行相同的操作</p><p><img src="/images/image/image-20200425212950581.png" alt="image-20200425212950581"></p></li></ul>        <h2   id="Input-DStreams-and-Receivers" >          <span class="heading-link">Input DStreams and Receivers</span>        </h2>      <p>SparkStream提供了两种内置的DStream数据源</p><ul><li>基本的数据源,如fileSystem,socket</li><li>高级的数据源,如kafka,flume</li></ul>        <h5   id="Points-to-remember" >          <span class="heading-link">Points to remember</span>        </h5>      <ul><li>本地运行,如果使用基于receiver的DStream时,不能使用local/local[1],因为这样只有一个core,而这个core用于接收数据了,就没用剩余的core来处理数据了</li><li>拓宽到集群,core的数量也必须大于receiver的数量</li><li>但是不基于receiver的DStream就没有这个限制了,如textFileStream</li><li>SparkStreaming只能监听到启动之后进来的数据,之前的数据是没法监听到的</li><li>DStream的count是按行计算的记录数,如果需要知道元素的个数,需要在遍历每一行进行计算</li></ul>        <h2   id="Transformations-on-DStreams" >          <span class="heading-link">Transformations on DStreams</span>        </h2>      <p>DStream除了可以使用高阶函数(如map,filter,flatMap等),还提供了<strong>updateStateByKey</strong>算子,用于更新DStream的状态,例如每批数据进来之后对wc中相同的key进行累加操作</p>        <h4   id="UpdateStateByKey-Operation" >          <span class="heading-link">UpdateStateByKey Operation</span>        </h4>      <p>为了使用这个算子,需要:</p><ul><li>定义State,可为任意类型</li><li>定义更新操作函数,处理旧值和新值</li></ul><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WcStateApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建StreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"wc"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateFunction</span></span>(newValues: <span class="type">Seq</span>[<span class="type">Int</span>], runningCount: <span class="type">Option</span>[<span class="type">Int</span>]): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">      <span class="keyword">val</span> newCount = newValues.sum + runningCount.getOrElse(<span class="number">0</span>)</span><br><span class="line">      <span class="type">Some</span>(newCount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建DStream,这里监听socket</span></span><br><span class="line">    <span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br><span class="line">    <span class="comment">//指定一个checkpoint目录,这样streaming就可以获取到以前的统计了</span></span><br><span class="line">    ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">    stream.flatMap(x =&gt; x.split(<span class="string">","</span>)).map((_, <span class="number">1</span>)).updateStateByKey(updateFunction).print()</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure><p>此时,再次启动wc程序,已经发现可以对批次累加了</p><p>但是这里还是有问题的,因为只要stream重启,以前的统计值就没法拿到了,我们应该从checkpoint中创建StreamingContext,这个才<span class="external-link"><a   href="http://spark.apache.org/docs/latest/streaming-programming-guide.html#checkpointing"  target="_blank" rel="noopener">checkponit</a><i class="fa fa-external-link"></i></span>中做了相关的论述</p><p>需要对程序做一下修改</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WcStateApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建StreamingContext</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">functionToCreateContext</span></span>(): <span class="type">StreamingContext</span> = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">updateFunction</span></span>(newValues: <span class="type">Seq</span>[<span class="type">Int</span>], runningCount: <span class="type">Option</span>[<span class="type">Int</span>]): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">        <span class="keyword">val</span> newCount = newValues.sum + runningCount.getOrElse(<span class="number">0</span>)</span><br><span class="line">        <span class="type">Some</span>(newCount)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"wc"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">      <span class="comment">//2.创建DStream,这里监听socket</span></span><br><span class="line">      <span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br><span class="line">      stream.flatMap(x =&gt; x.split(<span class="string">","</span>)).map((_, <span class="number">1</span>)).updateStateByKey(updateFunction).print()</span><br><span class="line"></span><br><span class="line">      ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">      ssc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get StreamingContext from checkpoint data or create a new one</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="type">StreamingContext</span>.getOrCreate(<span class="string">"checkpoint"</span>, functionToCreateContext _)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>再启动时,可以发现历史的已经可以从checkpoint中都出来了,但是历史闪的速度很快,并不是我们指定duration</p>        <h4   id="mapWithState" >          <span class="heading-link">mapWithState</span>        </h4>      <p>新版提供了mapWithState算子来管理state,与updateStateByKey不同的是,每接收到元素就会进行mappingFunction,而不是一批一批的mappingFunction,所以会导致同一批的统计中有很多值,如,一条记录是这样的:</p><p>1,5,4,2,1,4,1,41,5,4,2,1,4,1,41,5,4,2,1,4,1,41,5,4,2,1,4,1</p><p>此时,控制台的输出将是</p><p><img src="/images/image/image-20200425231515582.png" alt="image-20200425231515582"></p><p>可以看到,同一个key出现了多次,我们需要取最高值,而不是之前的值,感觉还不如updateStateByKey</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WcMapWithStateApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//1.创建StreamingContext</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">functionToCreateContext</span></span>(): <span class="type">StreamingContext</span> = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"wc"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sc, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">      <span class="comment">//2.创建DStream,这里监听socket</span></span><br><span class="line">      <span class="keyword">val</span> stream = ssc.socketTextStream(<span class="string">"hadoop001"</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">mappingFunction</span> </span>= (key: <span class="type">String</span>, value: <span class="type">Option</span>[<span class="type">Int</span>], state: <span class="type">State</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        <span class="comment">// Use state.exists(), state.get(), state.update() and state.remove()</span></span><br><span class="line">        <span class="comment">// to manage state, and return the necessary string</span></span><br><span class="line">        <span class="keyword">val</span> sum = value.getOrElse(<span class="number">0</span>) + state.getOption().getOrElse(<span class="number">0</span>)</span><br><span class="line">        state.update(sum)</span><br><span class="line">        (key, sum)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//新版提供了StateSpec.function(mappingFunction)进行mapWithState</span></span><br><span class="line">      stream.flatMap(x =&gt; x.split(<span class="string">","</span>)).map((_, <span class="number">1</span>)).mapWithState(<span class="type">StateSpec</span>.function(mappingFunction)).print()</span><br><span class="line"></span><br><span class="line">      ssc.checkpoint(<span class="string">"checkpoint"</span>)</span><br><span class="line">      ssc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get StreamingContext from checkpoint data or create a new one</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="type">StreamingContext</span>.getOrCreate(<span class="string">"checkpoint"</span>, functionToCreateContext _)</span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      SparkStreaming基础-SparkStreaming的基本使用,HelloWorld
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkStreaming" scheme="https://lurongjiang.github.io/categories/Spark/SparkStreaming/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkStreaming" scheme="https://lurongjiang.github.io/tags/SparkStreaming/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL基础-Spark SQL和RDD的交互</title>
    <link href="https://lurongjiang.github.io/2019/05/05/Spark-SparkSQL-%E5%92%8CRDD%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>https://lurongjiang.github.io/2019/05/05/Spark-SparkSQL-%E5%92%8CRDD%E7%9A%84%E4%BA%A4%E4%BA%92/</id>
    <published>2019-05-04T18:11:54.000Z</published>
    <updated>2019-05-15T11:15:06.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkSQL-和RDD的交互" >          <span class="heading-link">SparkSQL-和RDD的交互</span>        </h1>              <h2   id="RDD到DataSet" >          <span class="heading-link">RDD到DataSet</span>        </h2>      <ul><li>使用反射的方式来推导SparkSQL的schema(如:已知case class)</li><li>programmatic</li></ul>        <h3   id="反射方式" >          <span class="heading-link">反射方式</span>        </h3>      <p>这种预先知道并定义了case class</p><p>准备数据</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Justin,25</span><br><span class="line">Andy,35</span><br><span class="line">Michael,14</span><br></pre></td></tr></table></div></figure><p>程序</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">RddToDfTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().appName(<span class="string">"UdfTest"</span>).master(<span class="string">"local[2]"</span>).getOrCreate()</span><br><span class="line">    byCaseClass(spark)</span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class">  <span class="title">def</span> <span class="title">byCaseClass</span>(<span class="params">spark: <span class="type">SparkSession</span></span>)</span>: <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> rdd = spark.sparkContext.textFile(<span class="string">"input/info.txt"</span>)</span><br><span class="line">    <span class="keyword">val</span> person = rdd.map(str =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> words = str.split(<span class="string">","</span>)</span><br><span class="line">      <span class="type">Person</span>(words(<span class="number">0</span>), words(<span class="number">1</span>).toInt)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//导入转换,否则没有toDF</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    person.toDF().printSchema()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- age: integer (nullable &#x3D; false)</span><br></pre></td></tr></table></div></figure>        <h3   id="Row-Schema" >          <span class="heading-link">Row+Schema</span>        </h3>      <ul><li>获取RDD[String]</li><li>RDD[String]转成RDD[Row]</li><li>定义schema</li><li>使用RDD和schema创建df</li></ul><p>program</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byRow</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> rdd = spark.sparkContext.textFile(<span class="string">"input/info.txt"</span>)</span><br><span class="line">    <span class="comment">// 1.将RDD[String]=&gt;RDD[Row]</span></span><br><span class="line">    <span class="keyword">val</span> rowRDD = rdd.map(str =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> words = str.split(<span class="string">","</span>)</span><br><span class="line">      <span class="type">Row</span>(words(<span class="number">0</span>),words(<span class="number">1</span>).toInt)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 2.定义schema</span></span><br><span class="line">    <span class="keyword">val</span> struct=<span class="type">StructType</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"name"</span>,<span class="type">StringType</span>)::</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"age"</span>,<span class="type">IntegerType</span>)::<span class="type">Nil</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.将row作用schema转成df</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.createDataFrame(rowRDD, struct)</span><br><span class="line">    df.printSchema()</span><br><span class="line">    df.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- age: integer (nullable &#x3D; true)</span><br><span class="line"></span><br><span class="line">+-------+---+</span><br><span class="line">|   name|age|</span><br><span class="line">+-------+---+</span><br><span class="line">| Justin| 25|</span><br><span class="line">|   Andy| 35|</span><br><span class="line">|Michael| 14|</span><br><span class="line">+-------+---+</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark SQL和RDD的交互
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/categories/Spark/SparkSQL/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/tags/SparkSQL/"/>
    
      <category term="RDD" scheme="https://lurongjiang.github.io/tags/RDD/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL基础-Spark SQL-聚合和UDF</title>
    <link href="https://lurongjiang.github.io/2019/05/02/Spark-SparkSQL-%E8%81%9A%E5%90%88/"/>
    <id>https://lurongjiang.github.io/2019/05/02/Spark-SparkSQL-%E8%81%9A%E5%90%88/</id>
    <published>2019-05-01T17:59:02.000Z</published>
    <updated>2019-05-10T15:56:19.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkSQL-聚合和UDF" >          <span class="heading-link">SparkSQL-聚合和UDF</span>        </h1>      <p>准备数据</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">subject,userId,sex,score</span><br><span class="line">SubjectA,user1,male,512</span><br><span class="line">SubjectA,user2,female,521</span><br><span class="line">SubjectA,user3,female,152</span><br><span class="line">SubjectA,user4,male,542</span><br><span class="line">SubjectA,user5,male,542</span><br><span class="line">SubjectB,user11,male,652</span><br><span class="line">SubjectB,user21,male,562</span><br><span class="line">SubjectB,user31,female,562</span><br><span class="line">SubjectB,user41,female,2344</span><br><span class="line">SubjectB,user51,male,133</span><br><span class="line">SubjectC,user111,male,455</span><br><span class="line">SubjectC,user211,female,4553</span><br><span class="line">SubjectC,user311,male,4553</span><br><span class="line">SubjectC,user411,female,455</span><br><span class="line">SubjectC,user511,male,4552</span><br></pre></td></tr></table></div></figure>        <h2   id="分组求和" >          <span class="heading-link">分组求和</span>        </h2>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupBy</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="keyword">val</span> df = spark.read</span><br><span class="line">    .option(<span class="string">"sep"</span>, <span class="string">","</span>)</span><br><span class="line">    .option(<span class="string">"header"</span>, <span class="string">"true"</span>)</span><br><span class="line">    .option(<span class="string">"inferSchema"</span>, <span class="string">"true"</span>)</span><br><span class="line">    .format(<span class="string">"csv"</span>).load(<span class="string">"input/groupby.txt"</span>)</span><br><span class="line">  <span class="keyword">val</span> dataFrame = df.select($<span class="string">"subject"</span>, $<span class="string">"sex"</span>, $<span class="string">"score"</span>)</span><br><span class="line">  <span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line">  dataFrame.groupBy(<span class="string">"subject"</span>,<span class="string">"sex"</span>).agg(sum($<span class="string">"score"</span>)).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>API方式需要导入org.apache.spark.sql.functions已经定义好的函数</p><p><img src="/images/image/image-20200503121212427.png" alt="image-20200503121212427"></p><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------+------+----------+</span><br><span class="line">| subject|   sex|sum(score)|</span><br><span class="line">+--------+------+----------+</span><br><span class="line">|SubjectC|female|      5008|</span><br><span class="line">|SubjectC|  male|      9560|</span><br><span class="line">|SubjectB|  male|      1347|</span><br><span class="line">|SubjectB|female|      2906|</span><br><span class="line">|SubjectA|female|       673|</span><br><span class="line">|SubjectA|  male|      1596|</span><br><span class="line">+--------+------+----------+</span><br></pre></td></tr></table></div></figure>        <h2   id="分组topN" >          <span class="heading-link">分组topN</span>        </h2>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupTopN</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read</span><br><span class="line">    .option(<span class="string">"sep"</span>, <span class="string">","</span>)</span><br><span class="line">    .option(<span class="string">"header"</span>, <span class="string">"true"</span>)</span><br><span class="line">    .option(<span class="string">"inferSchema"</span>, <span class="string">"true"</span>)</span><br><span class="line">    .format(<span class="string">"csv"</span>).load(<span class="string">"input/groupby.txt"</span>)</span><br><span class="line">  df.createTempView(<span class="string">"subjects"</span>)</span><br><span class="line">  spark.sql(</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">      |select t.* from (</span></span><br><span class="line"><span class="string">      |select subject,sex,score,row_number() over (partition by subject,sex order by score desc) rn from subjects)t</span></span><br><span class="line"><span class="string">      |where t.rn&lt;=2</span></span><br><span class="line"><span class="string">      |"</span><span class="string">""</span>.stripMargin).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+--------+------+-----+---+</span><br><span class="line">| subject|   sex|score| rn|</span><br><span class="line">+--------+------+-----+---+</span><br><span class="line">|SubjectC|female| 4553|  1|</span><br><span class="line">|SubjectC|female|  455|  2|</span><br><span class="line">|SubjectC|  male| 4553|  1|</span><br><span class="line">|SubjectC|  male| 4552|  2|</span><br><span class="line">|SubjectB|  male|  652|  1|</span><br><span class="line">|SubjectB|  male|  562|  2|</span><br><span class="line">|SubjectB|female| 2344|  1|</span><br><span class="line">|SubjectB|female|  562|  2|</span><br><span class="line">|SubjectA|female|  521|  1|</span><br><span class="line">|SubjectA|female|  152|  2|</span><br><span class="line">|SubjectA|  male|  542|  1|</span><br><span class="line">|SubjectA|  male|  542|  2|</span><br><span class="line">+--------+------+-----+---+</span><br></pre></td></tr></table></div></figure>        <h2   id="UDF" >          <span class="heading-link">UDF</span>        </h2>      <p>准备数据</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:25,&quot;sex&quot;:0&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;lisi&quot;,&quot;age&quot;:41,&quot;sex&quot;:1&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;wangwu&quot;,&quot;age&quot;:32,&quot;sex&quot;:1&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhaoliu&quot;,&quot;age&quot;:41,&quot;sex&quot;:0&#125;</span><br></pre></td></tr></table></div></figure><p>程序</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">UdfTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().appName(<span class="string">"UdfTest"</span>).master(<span class="string">"local[2]"</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> sexFun = spark.udf.register(<span class="string">"aa"</span>, (str: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> toInt = str.toInt</span><br><span class="line">      <span class="keyword">if</span> (toInt == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="string">"male"</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="string">"female"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.json(<span class="string">"input/people.txt"</span>)</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    df.select($<span class="string">"name"</span>, $<span class="string">"age"</span>, sexFun($<span class="string">"sex"</span>).as(<span class="string">"sex"</span>)).show</span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>register进行注册,后面调用一下就可以了</p><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+---+------+</span><br><span class="line">|    name|age|   sex|</span><br><span class="line">+--------+---+------+</span><br><span class="line">|zhangsan| 25|  male|</span><br><span class="line">|    lisi| 41|female|</span><br><span class="line">|  wangwu| 32|female|</span><br><span class="line">| zhaoliu| 41|  male|</span><br><span class="line">+--------+---+------+</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark SQL常用的聚合和UDF操作
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/categories/Spark/SparkSQL/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/tags/SparkSQL/"/>
    
      <category term="Agg" scheme="https://lurongjiang.github.io/tags/Agg/"/>
    
      <category term="UDF" scheme="https://lurongjiang.github.io/tags/UDF/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL基础-Spark SQL-Source</title>
    <link href="https://lurongjiang.github.io/2019/04/28/Spark-SparkSQL-2/"/>
    <id>https://lurongjiang.github.io/2019/04/28/Spark-SparkSQL-2/</id>
    <published>2019-04-27T21:14:35.000Z</published>
    <updated>2019-04-29T20:43:04.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkSQL-Source" >          <span class="heading-link">SparkSQL-Source</span>        </h1>              <h2   id="JSON文件" >          <span class="heading-link">JSON文件</span>        </h2>              <h3   id="读取" >          <span class="heading-link">读取</span>        </h3>      <ul><li>sparkSession.read.format(“json”).load(path)</li><li>sparkSession.read.json(path)</li></ul><p>准备一份数据</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"zhangsan"</span>,<span class="attr">"age"</span>:<span class="number">18</span>,<span class="attr">"sex"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"lisi"</span>,<span class="attr">"age"</span>:<span class="number">32</span>,<span class="attr">"sex"</span>:<span class="string">"female"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"wangwu"</span>,<span class="attr">"age"</span>:<span class="number">45</span>,<span class="attr">"sex"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"zhaoliu"</span>,<span class="attr">"age"</span>:<span class="number">87</span>,<span class="attr">"sex"</span>:<span class="string">"male"</span>&#125;</span><br></pre></td></tr></table></div></figure><p>程序</p>        <h4   id="read-format-“json”-load-path" >          <span class="heading-link">read.format(“json”).load(path)</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">JsonSourceTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//创建SparkSession</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder()</span><br><span class="line">      .appName(<span class="string">"JsonSource"</span>)</span><br><span class="line">      .master(<span class="string">"local"</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="comment">//readJson1(spark)</span></span><br><span class="line">    readJson2(spark)</span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readJson1</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"input/json.txt"</span>)</span><br><span class="line">    df.printSchema()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4   id="sparkSession-read-json-path" >          <span class="heading-link">sparkSession.read.json(path)</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readJson2</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.json(<span class="string">"input/json.txt"</span>)</span><br><span class="line">    df.printSchema()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- age: long (nullable &#x3D; true)</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- sex: string (nullable &#x3D; true)</span><br></pre></td></tr></table></div></figure>        <h4   id="部分字段-select" >          <span class="heading-link">部分字段 select</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readJson3</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"input/json.txt"</span>)</span><br><span class="line">  df.printSchema()</span><br><span class="line">  <span class="comment">//选择部分列</span></span><br><span class="line">  df.select(<span class="string">"name"</span>,<span class="string">"sex"</span>).show(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+------+</span><br><span class="line">|name    |sex   |</span><br><span class="line">+--------+------+</span><br><span class="line">|zhangsan|male  |</span><br><span class="line">|lisi    |female|</span><br><span class="line">|wangwu  |male  |</span><br><span class="line">|zhaoliu |male  |</span><br><span class="line">+--------+------+</span><br></pre></td></tr></table></div></figure>        <h4   id="部分字段Select-DSL" >          <span class="heading-link">部分字段Select-DSL</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readJson4</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"input/json.txt"</span>)</span><br><span class="line">  <span class="comment">//需要添加隐式转换才能使用DSL语法</span></span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="comment">//选择部分列</span></span><br><span class="line">  df.select($<span class="string">"name"</span>,$<span class="string">"sex"</span>).show(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4   id="过滤-filter" >          <span class="heading-link">过滤-filter</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readJsonFilter</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"input/json.txt"</span>)</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">//选择部分列</span></span><br><span class="line">    <span class="keyword">val</span> dataFrame = df.select($<span class="string">"name"</span>, $<span class="string">"sex"</span>)</span><br><span class="line">    <span class="comment">//1.字符串</span></span><br><span class="line">    dataFrame.filter(<span class="string">"sex='female'"</span>).show(<span class="literal">false</span>)</span><br><span class="line">    <span class="comment">//2.df方式</span></span><br><span class="line">    dataFrame.filter(df(<span class="string">"sex"</span>)===<span class="string">"female"</span>).show()</span><br><span class="line">    <span class="comment">//3.DSL</span></span><br><span class="line">    dataFrame.filter(<span class="symbol">'sex</span>===<span class="string">"female"</span>).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------+</span><br><span class="line">|name|sex   |</span><br><span class="line">+----+------+</span><br><span class="line">|lisi|female|</span><br><span class="line">+----+------+</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure>        <h4   id="复杂对象" >          <span class="heading-link">复杂对象</span>        </h4>      <p>准备数据</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">0</span>,<span class="attr">"name"</span>:<span class="string">"admin"</span>,<span class="attr">"users"</span>:[&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"name"</span>:<span class="string">"guest"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">3</span>,<span class="attr">"name"</span>:<span class="string">"root"</span>&#125;]&#125;</span><br></pre></td></tr></table></div></figure><p>程序</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readJsonComplex</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"input/complexJson.txt"</span>)</span><br><span class="line">    df.printSchema()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">//选择部分列</span></span><br><span class="line">    df.select($<span class="string">"name"</span>, $<span class="string">"users.id"</span>,$<span class="string">"users.name"</span>.as(<span class="string">"users.name"</span>)).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: long (nullable &#x3D; true)</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- users: array (nullable &#x3D; true)</span><br><span class="line"> |    |-- element: struct (containsNull &#x3D; true)</span><br><span class="line"> |    |    |-- id: long (nullable &#x3D; true)</span><br><span class="line"> |    |    |-- name: string (nullable &#x3D; true)</span><br><span class="line"> </span><br><span class="line">+-----+------+-------------+</span><br><span class="line">| name|    id|   users.name|</span><br><span class="line">+-----+------+-------------+</span><br><span class="line">|admin|[2, 3]|[guest, root]|</span><br><span class="line">+-----+------+-------------+</span><br></pre></td></tr></table></div></figure>        <h3   id="输出" >          <span class="heading-link">输出</span>        </h3>      <ul><li>df.write.format(“json”).mode(SaveMode.Overwrite).save(path)</li><li>df.write.mode(SaveMode.Overwrite).json(path)</li></ul><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeJson</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"json"</span>).load(<span class="string">"input/json.txt"</span>)</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="comment">//选择部分列</span></span><br><span class="line">  <span class="keyword">val</span> dataFrame = df.select($<span class="string">"name"</span>, $<span class="string">"sex"</span>)</span><br><span class="line">  dataFrame.write.format(<span class="string">"json"</span>).mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>).save(<span class="string">"output/write.json"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>发现这个写出去和hdfs操作一样,output/write.json只是一个目录,真正的数据是partxxx</p>        <h2   id="Text文本文件" >          <span class="heading-link">Text文本文件</span>        </h2>              <h3   id="读取-1" >          <span class="heading-link">读取</span>        </h3>      <ul><li>read.format(“text”).load(path)</li><li>read.text(path)</li></ul><p>准备数据</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13429100031 22552  8  2013-03-11 08:55:19.151754088  571    571    282    571</span><br><span class="line">13429100082    22540  8  2013-03-11 08:58:20.152622488  571    571    270    571</span><br><span class="line">13429100082    22691  8  2013-03-11 08:56:37.149593624  571    571    103    571</span><br></pre></td></tr></table></div></figure>        <h4   id="read-format-“text”-load-path" >          <span class="heading-link">read.format(“text”).load(path)</span>        </h4>      <p>程序</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readText</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.format(<span class="string">"text"</span>).load(<span class="string">"input/text.txt"</span>)</span><br><span class="line">    df.show()</span><br><span class="line">    df.printSchema()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>输出</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+</span><br><span class="line">|               value|</span><br><span class="line">+--------------------+</span><br><span class="line">|1342910003122552...|</span><br><span class="line">|1342910008222540...|</span><br><span class="line">|1342910008222691...|</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">root</span><br><span class="line"> |-- value: string (nullable &#x3D; true)</span><br></pre></td></tr></table></div></figure>        <h4   id="map" >          <span class="heading-link">map</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"text"</span>).load(<span class="string">"input/text.txt"</span>)</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  df.map(row=&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> strings = row.getString(<span class="number">0</span>).split(<span class="string">"\t"</span>)</span><br><span class="line">    (strings(<span class="number">0</span>),strings(<span class="number">1</span>))</span><br><span class="line">  &#125;).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-----+</span><br><span class="line">|         _1|   _2|</span><br><span class="line">+-----------+-----+</span><br><span class="line">|13429100031|22552|</span><br><span class="line">|13429100082|22540|</span><br><span class="line">|13429100082|22691|</span><br><span class="line">+-----------+-----+</span><br></pre></td></tr></table></div></figure>        <h4   id="rdd" >          <span class="heading-link">rdd</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rdd</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"text"</span>).load(<span class="string">"input/text.txt"</span>)</span><br><span class="line">  df.rdd.map(row=&gt;&#123;</span><br><span class="line">    <span class="keyword">val</span> strings = row.getString(<span class="number">0</span>).split(<span class="string">"\t"</span>)</span><br><span class="line">    (strings(<span class="number">0</span>),strings(<span class="number">1</span>))</span><br><span class="line">  &#125;).foreach(println)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(13429100031,22552)</span><br><span class="line">(13429100082,22540)</span><br><span class="line">(13429100082,22691)</span><br></pre></td></tr></table></div></figure>        <h4   id="textFile" >          <span class="heading-link">textFile</span>        </h4>      <p>textFile直接返回一个DataSet而不是一个DataFrame</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">textFile</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> ds = spark.read.textFile(<span class="string">"input/text.txt"</span>)</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  ds.map(row =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> strings = row.split(<span class="string">"\t"</span>)</span><br><span class="line">    (strings(<span class="number">0</span>), strings(<span class="number">1</span>))</span><br><span class="line">  &#125;).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-----+</span><br><span class="line">|         _1|   _2|</span><br><span class="line">+-----------+-----+</span><br><span class="line">|13429100031|22552|</span><br><span class="line">|13429100082|22540|</span><br><span class="line">|13429100082|22691|</span><br><span class="line">+-----------+-----+</span><br></pre></td></tr></table></div></figure>        <h3   id="输出-1" >          <span class="heading-link">输出</span>        </h3>      <ul><li>write.text(path)</li><li>write.format(“text”).save(path)</li></ul><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeTextFile</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> ds = spark.read.textFile(<span class="string">"input/text.txt"</span>)</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="keyword">val</span> value = ds.map(row =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> strings = row.split(<span class="string">"\t"</span>)</span><br><span class="line">    (strings(<span class="number">0</span>), strings(<span class="number">1</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  value.write.mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>).text(<span class="string">"output/text"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>此时会报异常</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.spark.sql.AnalysisException: Text data source supports only a single column, and you have 2 columns.;</span><br></pre></td></tr></table></div></figure><p>多列数据想存储为text格式的时候,需要合并成一列</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeTextFile</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.text(<span class="string">"input/text.txt"</span>)</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="keyword">val</span> value = df.map(row =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> strings = row.getString(<span class="number">0</span>).split(<span class="string">"\t"</span>)</span><br><span class="line">    (strings(<span class="number">0</span>), strings(<span class="number">1</span>))</span><br><span class="line">  &#125;).map(x =&gt; x._1 +<span class="string">","</span>+ x._2)</span><br><span class="line">  value.write.mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>).text(<span class="string">"output/text"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13429100031,22552</span><br><span class="line">13429100082,22540</span><br><span class="line">13429100082,22691</span><br></pre></td></tr></table></div></figure>        <h4   id="compress" >          <span class="heading-link">compress</span>        </h4>      <p>要压缩保存,可以使用option指定compression</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeCompressionTextFile</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.text(<span class="string">"input/text.txt"</span>)</span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="keyword">val</span> value = df.map(row =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> strings = row.getString(<span class="number">0</span>).split(<span class="string">"\t"</span>)</span><br><span class="line">    (strings(<span class="number">0</span>), strings(<span class="number">1</span>))</span><br><span class="line">  &#125;).map(x =&gt; x._1 +<span class="string">","</span>+ x._2)</span><br><span class="line">  value.write.mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>).option(<span class="string">"compression"</span>,<span class="string">"bzip2"</span>).text(<span class="string">"output/text"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2   id="csv文件" >          <span class="heading-link">csv文件</span>        </h2>              <h3   id="读取-2" >          <span class="heading-link">读取</span>        </h3>      <ul><li>read.format(“csv”).load(path)</li><li>read.csv(path)</li></ul><p>准备数据</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name|age|sex</span><br><span class="line">zhangsan|20|male</span><br><span class="line">lisi|15|female</span><br><span class="line">wangwu|25|male</span><br></pre></td></tr></table></div></figure>        <h4   id="read-format-“csv”-load-path" >          <span class="heading-link">read.format(“csv”).load(path)</span>        </h4>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readCsv</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"csv"</span>)</span><br><span class="line">    .option(<span class="string">"header"</span>,<span class="string">"true"</span>)</span><br><span class="line">    .option(<span class="string">"sep"</span>, <span class="string">"|"</span>).load(<span class="string">"input/csv.txt"</span>)</span><br><span class="line">  df.printSchema()</span><br><span class="line">  df.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- age: string (nullable &#x3D; true)</span><br><span class="line"> |-- sex: string (nullable &#x3D; true)</span><br><span class="line"> </span><br><span class="line">+--------+---+------+</span><br><span class="line">|    name|age|   sex|</span><br><span class="line">+--------+---+------+</span><br><span class="line">|zhangsan| 20|  male|</span><br><span class="line">|    lisi| 15|female|</span><br><span class="line">|  wangwu| 25|  male|</span><br><span class="line">+--------+---+------+</span><br></pre></td></tr></table></div></figure><p>可以发现,csv好像不进行类型推断了,那是因为这个option没开启</p><figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readCsvInfer</span></span>(spark:<span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"csv"</span>)</span><br><span class="line">    .option(<span class="string">"header"</span>,<span class="string">"true"</span>).option(<span class="string">"inferSchema"</span>,<span class="string">"true"</span>)</span><br><span class="line">    .option(<span class="string">"sep"</span>, <span class="string">"|"</span>).load(<span class="string">"input/csv.txt"</span>)</span><br><span class="line">  df.printSchema()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- age: integer (nullable &#x3D; true)</span><br><span class="line"> |-- sex: string (nullable &#x3D; true)</span><br></pre></td></tr></table></div></figure><blockquote><p>Source的option</p><p>每个Source对应的option可以在 org.apache.spark.sql.execution包下找到相应的xxOption类</p></blockquote>        <h2   id="JDBC" >          <span class="heading-link">JDBC</span>        </h2>              <h3   id="读取-3" >          <span class="heading-link">读取</span>        </h3>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readMysql</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">val</span> df = spark.read.format(<span class="string">"jdbc"</span>)</span><br><span class="line">    .option(<span class="string">"url"</span>, <span class="string">"jdbc:mysql:///test?serverTimezone=Asia/Shanghai"</span>)</span><br><span class="line">    .option(<span class="string">"driver"</span>, <span class="string">"com.mysql.cj.jdbc.Driver"</span>)</span><br><span class="line">    .option(<span class="string">"dbtable"</span>, <span class="string">"t_order"</span>)</span><br><span class="line">    .option(<span class="string">"user"</span>, <span class="string">"lrj"</span>)</span><br><span class="line">    .option(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">    .load()</span><br><span class="line">  df.printSchema()</span><br><span class="line">  df.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>output</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: integer (nullable &#x3D; true)</span><br><span class="line"> |-- name: string (nullable &#x3D; true)</span><br><span class="line"> |-- number: integer (nullable &#x3D; true)</span><br><span class="line"> |-- product_id: integer (nullable &#x3D; true)</span><br><span class="line"> |-- total: double (nullable &#x3D; true)</span><br><span class="line"> </span><br><span class="line">+---+-----+------+----------+------+</span><br><span class="line">| id| name|number|product_id| total|</span><br><span class="line">+---+-----+------+----------+------+</span><br><span class="line">|  1|订单1|     2|         1| 355.0|</span><br><span class="line">|  2|订单1|     2|         2|  45.0|</span><br><span class="line">|  3|订单2|     5|         1|1000.0|</span><br><span class="line">+---+-----+------+----------+------+</span><br></pre></td></tr></table></div></figure>        <h3   id="输出-2" >          <span class="heading-link">输出</span>        </h3>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeMysql</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> df = spark.read.format(<span class="string">"jdbc"</span>)</span><br><span class="line">      .option(<span class="string">"url"</span>, <span class="string">"jdbc:mysql:///test?serverTimezone=Asia/Shanghai"</span>)</span><br><span class="line">      .option(<span class="string">"driver"</span>, <span class="string">"com.mysql.cj.jdbc.Driver"</span>)</span><br><span class="line">      .option(<span class="string">"dbtable"</span>, <span class="string">"t_order"</span>)</span><br><span class="line">      .option(<span class="string">"user"</span>, <span class="string">"lrj"</span>)</span><br><span class="line">      .option(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">      .load()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    df.filter(<span class="symbol">'total</span>&lt;<span class="number">500</span>) .write.option(<span class="string">"url"</span>, <span class="string">"jdbc:mysql:///test?serverTimezone=Asia/Shanghai"</span>)</span><br><span class="line">      .option(<span class="string">"driver"</span>, <span class="string">"com.mysql.cj.jdbc.Driver"</span>)</span><br><span class="line">      .option(<span class="string">"dbtable"</span>, <span class="string">"t_order_filter"</span>)</span><br><span class="line">      .option(<span class="string">"user"</span>, <span class="string">"lrj"</span>)</span><br><span class="line">      .option(<span class="string">"password"</span>, <span class="string">"123456"</span>).mode(<span class="type">SaveMode</span>.<span class="type">Overwrite</span>).format(<span class="string">"jdbc"</span>).save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这个还是挺骚的,不需要提前创建表</p><blockquote><p>SaveMode</p><p>write的SaveMode需要注意,如果不指定,当输出路径存在时会报错</p></blockquote>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark SQL常用的数据源操作
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/categories/Spark/SparkSQL/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/tags/SparkSQL/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL基础-Spark SQL</title>
    <link href="https://lurongjiang.github.io/2019/04/21/Spark-SparkSQL-1/"/>
    <id>https://lurongjiang.github.io/2019/04/21/Spark-SparkSQL-1/</id>
    <published>2019-04-20T23:52:31.000Z</published>
    <updated>2019-04-27T12:25:41.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkSQL-1" >          <span class="heading-link">SparkSQL-1</span>        </h1>              <h2   id="为什么要使用SQL" >          <span class="heading-link">为什么要使用SQL</span>        </h2>      <p>传统SQL手段,对于RDBMS在数据量大之后,很难满足需求,或者性能很低,需要将原来的SQL方式转为大数据方向,也就是云化.但是最好能保留原有的SQL方式,不会影响原来的业务.</p>        <h2   id="常见的SQL-On-Hadoop框架" >          <span class="heading-link">常见的SQL On Hadoop框架</span>        </h2>      <ul><li><p>Hive</p><p>Hive的出现已经很久了,技术成熟,主要处理<strong>离线业务,时延比较高</strong></p></li><li><p>Impala</p><p>Cloudera公司基于Parquet实现</p></li><li><p>Presto</p></li><li><p>Shark</p><p>基于Hive,将SQL运行在Spark之上,但是对执行计划优化比较弱,过于依赖Hive,维护升级难</p></li><li><p>Hive On Spark</p><p>Hive默认使用MR作业方式运行,可以通过设置set =spark转换Hive为Spark作业,语法支持丰富</p><p>可以通过set hive.execution.engine=spark</p></li><li><p>Spark SQL<br>语法解析,执行计划优化全都由Spark来实现,逐步支持各种SQL</p></li><li><p>Drill</p></li><li><p>Phoenix</p><p>HBase SQL化</p></li></ul>        <h2   id="SparkSQL" >          <span class="heading-link">SparkSQL</span>        </h2>      <p>Spark处理结构化数据的一个模块</p><p>SparkSQL</p>        <h3   id="特点" >          <span class="heading-link">特点</span>        </h3>      <ul><li><p>使用Spark编程无缝对接SQL查询</p><p>使用SQL或者DataFrameAPI查询处理结构化数据</p></li><li><p>统一数据访问</p><p>使用DataFrame和SQL可以访问多种数据源,包括Hive,Avro,Parquet,ORC,JSON,JDBC等</p></li><li><p>Hive集成</p><p>支持HiveQL语法,UDF等</p></li><li><p>标准连接</p><p>支持JDBC,ODBC连接</p></li></ul><blockquote><p>Spark SQL强调的是<strong>结构化数据</strong>,而不是SQL</p><p>Spark SQL支持SQL,DataFrame,DataSet</p><p>总的来说:</p><p>Spark SQL is not about SQL</p><p>Spark SQL is about more than SQL</p></blockquote>        <h2   id="DataSet-amp-DataFrame" >          <span class="heading-link">DataSet &amp; DataFrame</span>        </h2>              <h3   id="DataSet" >          <span class="heading-link">DataSet</span>        </h3>      <ul><li>特殊的RDD,也是分布式数据集</li><li>spark1.6引入的</li><li>强类型,可以使用lamda函数</li><li>可以从JVM对象中使用转换函数转换而来</li></ul>        <h3   id="DataFrame" >          <span class="heading-link">DataFrame</span>        </h3>      <ul><li><p>DataFrame是一个特殊的DataSet</p></li><li><p>等同于关系型数据库的一张表</p></li><li><p>DataFrame可以结构化数据文件,Hive,外部数据源或者已存在的RDD中构造出来</p></li><li><p>DF=DataSet[Row]</p></li></ul>        <h2   id="Hello-World" >          <span class="heading-link">Hello World</span>        </h2>      <figure class="highlight scala"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorldApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//创建SparkSession对象,这个是SparkSQL的入口</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder()</span><br><span class="line">      .appName(<span class="string">"helloWorldApp"</span>)</span><br><span class="line">      .master(<span class="string">"local[2]"</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取json,传入json文件路径</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.read.json(<span class="string">"input/access.json"</span>)</span><br><span class="line"></span><br><span class="line">    df.printSchema()</span><br><span class="line">    <span class="comment">//将读到的json创建一个临时表,这样后面就可以使用sql了,传入表名</span></span><br><span class="line">    df.createOrReplaceTempView(<span class="string">"json"</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">"select ip,ispname,cityname from json"</span>).show(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    spark.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2   id="注意" >          <span class="heading-link">注意</span>        </h2>      <ul><li>Spark RDD中的cache是lazy的,Spark1.6开始,Spark SQL中的cache/uncache是eager,默认存储级别内存无序列化</li></ul>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark SQL的基本使用,HelloSparkSQL
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/categories/Spark/SparkSQL/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkSQL" scheme="https://lurongjiang.github.io/tags/SparkSQL/"/>
    
  </entry>
  
  <entry>
    <title>SparkCore基础-Spark监控</title>
    <link href="https://lurongjiang.github.io/2019/04/18/Spark-Spark%E7%9B%91%E6%8E%A7/"/>
    <id>https://lurongjiang.github.io/2019/04/18/Spark-Spark%E7%9B%91%E6%8E%A7/</id>
    <published>2019-04-18T07:14:54.000Z</published>
    <updated>2019-04-19T16:10:06.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="Spark监控" >          <span class="heading-link">Spark监控</span>        </h1>              <h2   id="spark自带的Monitor" >          <span class="heading-link">spark自带的Monitor</span>        </h2>      <p>4040端口生命周期可见</p><p>生命周期结束要看,需要配置</p><p>spark-default.properties</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spark.master</span>=<span class="string">local</span></span><br><span class="line"><span class="meta">spark.eventLog.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spark.eventLog.dir</span>=<span class="string">xx</span></span><br></pre></td></tr></table></div></figure><p>spark-env.sh</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">SPARK_HISTORY_OPTS="-Dspark.history.fs.logDirectory=xx -Dspark.history.ui.port=xx"</span></span><br></pre></td></tr></table></div></figure>        <h2   id="自定义实现" >          <span class="heading-link">自定义实现</span>        </h2>      <p>SparkLister</p>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark的监控,监控Spark程序的生命周期
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/categories/Spark/SparkCore/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/tags/SparkCore/"/>
    
  </entry>
  
  <entry>
    <title>SparkCore基础-Spark作业提交</title>
    <link href="https://lurongjiang.github.io/2019/04/17/Spark-SparkCore-SumbmitApplication/"/>
    <id>https://lurongjiang.github.io/2019/04/17/Spark-SparkCore-SumbmitApplication/</id>
    <published>2019-04-17T01:32:22.000Z</published>
    <updated>2019-04-19T03:58:52.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkCore-SumbmitApplication" >          <span class="heading-link">SparkCore-SumbmitApplication</span>        </h1>      <p>hdfs:<br>HADOOP_CONF_DIR</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--class com.lrj.spark.core.offline.WordCountApp \</span><br><span class="line">--name WCApp \</span><br><span class="line">--master <span class="built_in">local</span>[2] \</span><br><span class="line">--jars /usr/software/spark/lib/spark-utils-1.0-SNAPSHOT.jar \</span><br><span class="line">/usr/software/spark/lib/spark-demo-1.0-SNAPSHOT.jar \</span><br><span class="line">input/wc.txt output/wc</span><br></pre></td></tr></table></div></figure><p>yarn:<br>YARN_CONF_DIR</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--class com.lrj.spark.core.offline.WordCountApp \</span><br><span class="line">--name WCApp \</span><br><span class="line">--master yarn \</span><br><span class="line">--jars /usr/software/spark/lib/spark-utils-1.0-SNAPSHOT.jar \</span><br><span class="line">/usr/software/spark/lib/spark-demo-1.0-SNAPSHOT.jar \</span><br><span class="line">input/wc.txt output/wc</span><br></pre></td></tr></table></div></figure><p><img src="/images/imageimage-20200323011505418.png" alt="image-20200323011505418"></p><p>作业提交之后,先Accept,等到得到资源之后才会开始运行,如果资源不够可能回导致等待时间很长</p><p><img src="/images/imageimage-20200323011637172.png" alt="image-20200323011637172"></p>        <h3   id="不同模式的Spark任务" >          <span class="heading-link">不同模式的Spark任务</span>        </h3>              <h4   id="client模式" >          <span class="heading-link">client模式</span>        </h4>      <ul><li><p>本地启动Driver (new SparkContext(xx).setMaster(xx) )</p></li><li><p>Driver和RM通信,请求启动AM</p></li><li><p>RM找一台NM启动AM</p></li><li><p>AM向RM申请资源</p></li><li><p>RM分配一批资源给AM,AM根据资源分布与NM通信,启动Executor容器</p></li><li><p>Executor反向注册到Driver</p></li></ul><p>Executor和Driver必须时不时的通信,可能会出现网络激增</p><p>关于spark-submit的说明</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">Usage: spark-submit [options] &lt;app jar | python file | R file&gt; [app arguments]</span><br><span class="line">Usage: spark-submit --<span class="built_in">kill</span> [submission ID] --master [spark://...]</span><br><span class="line">Usage: spark-submit --status [submission ID] --master [spark://...]</span><br><span class="line">Usage: spark-submit run-example [options] example-class [example args]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --master MASTER_URL         spark://host:port, mesos://host:port, yarn,</span><br><span class="line">                              k8s://https://host:port, or <span class="built_in">local</span> (Default: <span class="built_in">local</span>[*]).</span><br><span class="line">  --deploy-mode DEPLOY_MODE   Whether to launch the driver program locally (<span class="string">"client"</span>) or</span><br><span class="line">                              on one of the worker machines inside the cluster (<span class="string">"cluster"</span>)</span><br><span class="line">                              (Default: client).</span><br><span class="line">  --class CLASS_NAME          Your application<span class="string">'s main class (for Java / Scala apps).</span></span><br><span class="line"><span class="string">  --name NAME                 A name of your application.</span></span><br><span class="line"><span class="string">  --jars JARS                 Comma-separated list of jars to include on the driver</span></span><br><span class="line"><span class="string">                              and executor classpaths.</span></span><br><span class="line"><span class="string">  --packages                  Comma-separated list of maven coordinates of jars to include</span></span><br><span class="line"><span class="string">                              on the driver and executor classpaths. Will search the local</span></span><br><span class="line"><span class="string">                              maven repo, then maven central and any additional remote</span></span><br><span class="line"><span class="string">                              repositories given by --repositories. The format for the</span></span><br><span class="line"><span class="string">                              coordinates should be groupId:artifactId:version.</span></span><br><span class="line"><span class="string">  --exclude-packages          Comma-separated list of groupId:artifactId, to exclude while</span></span><br><span class="line"><span class="string">                              resolving the dependencies provided in --packages to avoid</span></span><br><span class="line"><span class="string">                              dependency conflicts.</span></span><br><span class="line"><span class="string">  --repositories              Comma-separated list of additional remote repositories to</span></span><br><span class="line"><span class="string">                              search for the maven coordinates given with --packages.</span></span><br><span class="line"><span class="string">  --py-files PY_FILES         Comma-separated list of .zip, .egg, or .py files to place</span></span><br><span class="line"><span class="string">                              on the PYTHONPATH for Python apps.</span></span><br><span class="line"><span class="string">  --files FILES               Comma-separated list of files to be placed in the working</span></span><br><span class="line"><span class="string">                              directory of each executor. File paths of these files</span></span><br><span class="line"><span class="string">                              in executors can be accessed via SparkFiles.get(fileName).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --conf PROP=VALUE           Arbitrary Spark configuration property.</span></span><br><span class="line"><span class="string">  --properties-file FILE      Path to a file from which to load extra properties. If not</span></span><br><span class="line"><span class="string">                              specified, this will look for conf/spark-defaults.conf.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --driver-memory MEM         Memory for driver (e.g. 1000M, 2G) (Default: 1024M).</span></span><br><span class="line"><span class="string">  --driver-java-options       Extra Java options to pass to the driver.</span></span><br><span class="line"><span class="string">  --driver-library-path       Extra library path entries to pass to the driver.</span></span><br><span class="line"><span class="string">  --driver-class-path         Extra class path entries to pass to the driver. Note that</span></span><br><span class="line"><span class="string">                              jars added with --jars are automatically included in the</span></span><br><span class="line"><span class="string">                              classpath.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --executor-memory MEM       Memory per executor (e.g. 1000M, 2G) (Default: 1G).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --proxy-user NAME           User to impersonate when submitting the application.</span></span><br><span class="line"><span class="string">                              This argument does not work with --principal / --keytab.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --help, -h                  Show this help message and exit.</span></span><br><span class="line"><span class="string">  --verbose, -v               Print additional debug output.</span></span><br><span class="line"><span class="string">  --version,                  Print the version of current Spark.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Cluster deploy mode only:</span></span><br><span class="line"><span class="string">  --driver-cores NUM          Number of cores used by the driver, only in cluster mode</span></span><br><span class="line"><span class="string">                              (Default: 1).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Spark standalone or Mesos with cluster deploy mode only:</span></span><br><span class="line"><span class="string">  --supervise                 If given, restarts the driver on failure.</span></span><br><span class="line"><span class="string">  --kill SUBMISSION_ID        If given, kills the driver specified.</span></span><br><span class="line"><span class="string">  --status SUBMISSION_ID      If given, requests the status of the driver specified.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Spark standalone and Mesos only:</span></span><br><span class="line"><span class="string">  --total-executor-cores NUM  Total cores for all executors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Spark standalone and YARN only:</span></span><br><span class="line"><span class="string">  --executor-cores NUM        Number of cores per executor. (Default: 1 in YARN mode,</span></span><br><span class="line"><span class="string">                              or all available cores on the worker in standalone mode)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> YARN-only:</span></span><br><span class="line"><span class="string">  --queue QUEUE_NAME          The YARN queue to submit to (Default: "default").</span></span><br><span class="line"><span class="string">  --num-executors NUM         Number of executors to launch (Default: 2).</span></span><br><span class="line"><span class="string">                              If dynamic allocation is enabled, the initial number of</span></span><br><span class="line"><span class="string">                              executors will be at least NUM.</span></span><br><span class="line"><span class="string">  --archives ARCHIVES         Comma separated list of archives to be extracted into the</span></span><br><span class="line"><span class="string">                              working directory of each executor.</span></span><br><span class="line"><span class="string">  --principal PRINCIPAL       Principal to be used to login to KDC, while running on</span></span><br><span class="line"><span class="string">                              secure HDFS.</span></span><br><span class="line"><span class="string">  --keytab KEYTAB             The full path to the file that contains the keytab for the</span></span><br><span class="line"><span class="string">                              principal specified above. This keytab will be copied to</span></span><br><span class="line"><span class="string">                              the node running the Application Master via the Secure</span></span><br><span class="line"><span class="string">                              Distributed Cache, for renewing the login tickets and the</span></span><br><span class="line"><span class="string">                              delegation tokens periodically.</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark作业提交
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/categories/Spark/SparkCore/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/tags/SparkCore/"/>
    
  </entry>
  
  <entry>
    <title>SparkCore基础-Spark On Yarn</title>
    <link href="https://lurongjiang.github.io/2019/04/15/Spark-Spark%20On%20Yarn/"/>
    <id>https://lurongjiang.github.io/2019/04/15/Spark-Spark%20On%20Yarn/</id>
    <published>2019-04-14T17:29:49.000Z</published>
    <updated>2019-04-17T09:38:42.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="Spark-On-Yarn" >          <span class="heading-link">Spark On Yarn</span>        </h1>              <h2   id="Launching-Spark-on-YARN" >          <span class="heading-link">Launching Spark on YARN</span>        </h2>      <ul><li><p>Spark On Yarn务必配置<code>HADOOP_CONF_DIR</code>或者<code>YARN_CONF_DIR</code>指向Hadoop的配置目录(<code>$HADOOP_HOME/etc/hadoop</code>),否则报错</p></li><li><p><strong>Spark On Yarn的两种模式</strong></p><ul><li><p>client</p><p>client模式中,Driver进程运行再客户端的进程中,所以客户端提交任务后必须等待任务执行完成,适合交互性任务</p></li><li><p>cluster</p><p>cluster模式中,Driver是运行在Yarn管理应用程序主进程中,客户端提交完任务后就可以退出了,不适合交互性任务</p></li></ul></li><li><p>Yarn模式和其他cluster模式不一样</p><ul><li>其他模式的–master参数必须指定到master的地址</li><li>yarn模式–master只需要写一个yarn就行,yarn会从配置文件中获取到ResourceManager的地</li></ul></li><li><p>启动spark集群命令</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-submit --class path.to.your.Class --master yarn --deploy-mode cluster [options] &lt;app jar&gt; [app options]</span><br></pre></td></tr></table></div></figure><p>例如</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spark-submit --class org.apache.spark.examples.SparkPi \</span><br><span class="line">    --master yarn \</span><br><span class="line">    --deploy-mode cluster \</span><br><span class="line">    --driver-memory 4g \</span><br><span class="line">    --executor-memory 2g \</span><br><span class="line">    --executor-cores 1 \</span><br><span class="line">    --queue thequeue \</span><br><span class="line">    examples/jars/spark-examples*.jar \</span><br><span class="line">    10</span><br></pre></td></tr></table></div></figure><p>如果需要使用yarn client模式,只需把–deploy-mode设置为client</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spark-submit --class org.apache.spark.examples.SparkPi \</span><br><span class="line">    --master yarn \</span><br><span class="line">    --deploy-mode cluster \</span><br><span class="line">    --driver-memory 4g \</span><br><span class="line">    --executor-memory 2g \</span><br><span class="line">    --executor-cores 1 \</span><br><span class="line">    --queue thequeue \</span><br><span class="line">    examples/jars/spark-examples*.jar \</span><br><span class="line">    10</span><br></pre></td></tr></table></div></figure></li></ul>        <h2   id="Adding-Other-JARs" >          <span class="heading-link">Adding Other JARs</span>        </h2>      <ul><li>集群模式中,Driver不是运行在client端,所以使用<code>SparkContext.addJar</code>并没有用,如果需要添加额外的依赖包,需要使用–jars传入,多个jar包使用逗号分隔</li></ul>        <h2   id="Preparations" >          <span class="heading-link">Preparations</span>        </h2>      <p><img src="/images/imageimage-20200328140011807.png" alt="image-20200328140011807"></p><p><img src="/images/imageimage-20200328140028637.png" alt="image-20200328140028637"></p><p>为了让Spark能在Yarn上运行,需要指定<code>spark.yarn.archive</code>或者<code>spark.yarn.jars</code>属性,如果两个都没指定,Spark每次任务运行的时候就把<code>$SPARK_HOME/jars</code>下的所有jar包上传到分布式缓存中</p><p>没设置时</p><p><img src="/images/imageimage-20200328162119061.png" alt="image-20200328162119061"></p><p>设置之后</p><p><img src="/images/imageimage-20200328165016988.png" alt="image-20200328165016988"></p><p>spark-default.conf</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark.yarn.jars hdfs:&#x2F;&#x2F;&#x2F;spark&#x2F;*.jar</span><br></pre></td></tr></table></div></figure><p>需要把jar包上传到/spark目录,这样就不会每次都上传jar包到hdfs了</p>        <h2   id="Debugging-your-Application" >          <span class="heading-link">Debugging your Application</span>        </h2>      <ul><li><p>如果开启了yarn日志收集功能(配置了<code>yarn.log-aggregation-enable</code>=true),日志会拷贝到yarn上,然后删除本地日志,如果要看日志,需要使用命令</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn logs -applicationId &lt;app ID&gt;</span><br></pre></td></tr></table></div></figure><p>这个命令会打印出指定appId的所有日志信息</p><p>你也可以通过hdfs shell和相关api获取</p><p>你可以通过<code>yarn.nodemanager.remote-app-log-dir</code> and <code>yarn.nodemanager.remote-app-log-dir-suffix</code>来定位你的日志到底是哪一个</p><p>这些日在在SparkUI中也可以查看到,在Executor页签中</p><p>你需要保证Spark日志服务和Yarn的日志服务都是启动的,并且  <code>yarn-site.xml</code>中的<code>yarn.log.server.url</code>属性配置正确</p></li><li><p>如果没有开启日志收集功能,则日志会存在本地,你可以在 <code>$HADOOP_HOME/logs/user</code>中查看到</p></li><li><p>为了检查看每个Container的环境,你需要配置<code>yarn.nodemanager.delete.debug-delay-sec</code>多久删除本地的日志,这样你就可以进入事先配置的<code>yarn.nodemanager.local-dirs</code>目录下查看每个容器的环境情况,下面包含了任务执行的script, JARs和所有的环境变量</p></li><li><p>为了使用自己的log4j来打印日志,可以在spark-submit脚本中,把自己的log4j.properties通过–files传入</p><p>或者在<code>spark.driver.extraJavaOptions</code>中设置’-Dlog4j.configuration=&lt; location of configuration file&gt;’</p><p>当然你可以直接修改$SPARK_HOME/conf/log4j.properties</p></li></ul>        <h2   id="Important-notes" >          <span class="heading-link">Important notes</span>        </h2>      <ul><li><p>Yarn配置什么调度器就使用什么方式调度</p></li><li><p>在cluster模式中,executor和driver使用的本地目录可以通过<code>yarn.nodemanager.local-dirs</code>来指定</p><p>如果p配置了<code>spark.local.dir</code>,则会忽略掉yarn的配置</p><p>client模式可以指定<code>spark.local.dir</code>,因为Driver并不是运行在yarn集群中的</p></li><li><p><code>--files</code> 和<code>--archives</code>选项都可以使用类似Hadoop中<code>#</code>的用法(和别名类似,不需要每次写全路径)</p></li><li><p>cluster模式中使用<code>--jars</code>来指定本地的jars包路径,但是如果使用的是HDFS, HTTP, HTTPS, or FTP的文件则不需要</p></li></ul>]]></content>
    
    <summary type="html">
    
      SparkCore-Spark On Yarn的两种模式
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/tags/SparkCore/"/>
    
  </entry>
  
  <entry>
    <title>SparkCore基础-Action-2</title>
    <link href="https://lurongjiang.github.io/2019/04/08/Spark-SparkCore-2/"/>
    <id>https://lurongjiang.github.io/2019/04/08/Spark-SparkCore-2/</id>
    <published>2019-04-08T09:46:09.000Z</published>
    <updated>2019-04-11T08:12:26.000Z</updated>
    
    <content type="html"><![CDATA[        <h1   id="SparkCore-2" >          <span class="heading-link">SparkCore-2</span>        </h1>              <h3   id="新建工程" >          <span class="heading-link">新建工程</span>        </h3>      <ul><li><p>新建maven父工程</p></li><li><p>新建Module&gt;maven</p><ul><li>core</li><li>streaming</li><li>ml</li><li>hbase</li></ul></li></ul>        <h2   id="SparkCore" >          <span class="heading-link">SparkCore</span>        </h2>              <h3   id="Transformation" >          <span class="heading-link">Transformation</span>        </h3>              <h4   id="map" >          <span class="heading-link">map</span>        </h4>      <p>迭代每一个元素</p>        <h4   id="mapPartition" >          <span class="heading-link">mapPartition</span>        </h4>      <p>迭代每个分区</p>        <h4   id="mapPartitionWithIndex" >          <span class="heading-link">mapPartitionWithIndex</span>        </h4>              <h4   id="grom" >          <span class="heading-link">grom</span>        </h4>              <h4   id="filter" >          <span class="heading-link">filter</span>        </h4>              <h4   id="sample" >          <span class="heading-link">sample</span>        </h4>      <p>取样</p>        <h4   id="zip" >          <span class="heading-link">zip</span>        </h4>      <p>拉链</p><blockquote><p> 注意点</p><p>spark和scala不同,spark中必须保证:</p><ul><li><p>元素数目相同</p></li><li><p>分区数相同</p></li></ul></blockquote>        <h4   id="zipWithIndex" >          <span class="heading-link">zipWithIndex</span>        </h4>              <h4   id="union" >          <span class="heading-link">union</span>        </h4>              <h4   id="intersection" >          <span class="heading-link">intersection</span>        </h4>      <p>交集,去重</p>        <h4   id="substract" >          <span class="heading-link">substract</span>        </h4>      <p>差集,不去重</p>        <h4   id="cartesian" >          <span class="heading-link">cartesian</span>        </h4>      <p>卡笛尔集</p>        <h4   id="distinct" >          <span class="heading-link">distinct</span>        </h4>      <p>去重</p><p>分区数不变</p>        <h4   id="sortBy" >          <span class="heading-link">sortBy</span>        </h4>              <h4   id="sorkByKey" >          <span class="heading-link">sorkByKey</span>        </h4>      <p>KV类型</p>        <h4   id="groupBy" >          <span class="heading-link">groupBy</span>        </h4>      <p>这个出来的是(key,Interator),需要对iteration的内容进行进一步的处理</p>        <h4   id="groupByKey" >          <span class="heading-link">groupByKey</span>        </h4>      <p>出来(k,v)</p>        <h4   id="mapValues" >          <span class="heading-link">mapValues</span>        </h4>              <h4   id="reduceByKey" >          <span class="heading-link">reduceByKey</span>        </h4>      <p>先本地聚合,再shuffle</p>        <h4   id="join" >          <span class="heading-link">join</span>        </h4>      <p>inner join</p>        <h4   id="leftOuterJoion" >          <span class="heading-link">leftOuterJoion</span>        </h4>              <h4   id="rightOuterJoin" >          <span class="heading-link">rightOuterJoin</span>        </h4>              <h4   id="fullOutJoin" >          <span class="heading-link">fullOutJoin</span>        </h4>              <h4   id="coalesce" >          <span class="heading-link">coalesce</span>        </h4>      <p>由多变少</p><p>指定第二个参数true之后,可以实现少变多,重新分区1</p>        <h4   id="repartition" >          <span class="heading-link">repartition</span>        </h4>      <p>遇到shuffle就切分statge</p>]]></content>
    
    <summary type="html">
    
      SparkCore的常用Action
    
    </summary>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/categories/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/categories/Spark/SparkCore/"/>
    
    
      <category term="Spark" scheme="https://lurongjiang.github.io/tags/Spark/"/>
    
      <category term="SparkCore" scheme="https://lurongjiang.github.io/tags/SparkCore/"/>
    
  </entry>
  
</feed>
